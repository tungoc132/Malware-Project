
# [*] Obfuscating 72 Command tokens.


function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = &("{0}{1}{3}{2}" -f 'Ne','w-','ect','Obj') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&("{1}{2}{0}" -f 'Host','Wr','ite-') "Checking for AzureAD module..."

    $AadModule = &("{1}{2}{0}{3}"-f 'Modul','Get','-','e') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &("{2}{0}{1}" -f 'Ho','st','Write-') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &("{3}{1}{0}{2}"-f'Modu','-','le','Get') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &("{0}{1}{3}{2}"-f'w','rite','t','-hos')
        &("{1}{0}{3}{2}"-f 'r','w','-host','ite') "AzureAD Powershell module not installed..." -f Red
        &("{2}{1}{0}" -f't','te-hos','wri') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &("{0}{2}{1}{3}"-f'writ','ho','e-','st') "Script can't continue..." -f Red
        &("{1}{2}{0}"-f'host','wri','te-')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &("{2}{0}{1}"-f 'ele','ct','s') version | &("{1}{0}{2}" -f 'rt-Objec','So','t'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &("{1}{0}"-f't','selec') -Unique

            }

        $adal = &("{1}{2}{0}" -f'h','Joi','n-Pat') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{3}{1}{2}{0}" -f'th','i','n-Pa',<REDACTED: ObfuscatedLength = 10824> specify your user principal name for Azure Authentication"
    &("{0}{2}{3}{1}"-f'Writ','ost','e','-H')

    }


$global:authToken = .("{0}{3}{1}{2}"-f'G','t-AuthToke','n','e') -User $User

}





$DeviceName = "Intune Device Name"

$IntuneDevice = .("{0}{1}{3}{2}" -f'Get-Man','agedDe','s','vice') -DeviceName "$DeviceName"

if($IntuneDevice){

    if(@($IntuneDevice).count -eq 1){

    .("{1}{2}{0}" -f 'host','w','rite-') "Are you sure you want to remove all scope tags from '$DeviceName' (Y or N?)" -ForegroundColor Yellow
    $Confirm = &("{2}{1}{0}"-f'-host','ead','r')

        if($Confirm -eq "y" -or $Confirm -eq "Y"){

        $DeviceID = $IntuneDevice.id
        $DeviceName = $IntuneDevice.deviceName

        .("{2}{0}{1}" -f'o','st','write-h') "Managed Device" $IntuneDevice.deviceName "found..." -ForegroundColor Yellow

        $Result = &("{3}{0}{1}{5}{2}{4}" -f 'ate','-Man','dDevi','Upd','ces','age') -id $DeviceID -ScopeTags ""

            if($Result -eq ""){

                .("{0}{2}{1}" -f'Wri','-Host','te') "Managed Device '$DeviceName' patched with No Scope Tag assigned..." -ForegroundColor Gray

            }

        }

        else {

            .("{0}{2}{1}{3}"-f'Wr','e-H','it','ost') "Removal of all Scope Tags for '$DeviceName' was cancelled..."

        }

        &("{1}{2}{0}" -f '-Host','Wri','te')

    }

    elseif(@($IntuneManagedDevice).count -gt 1){

        &("{2}{0}{1}" -f'rite','-Host','W') "More than one device found with name '$deviceName'..." -ForegroundColor Red

    }

}

else {

&("{1}{3}{0}{2}" -f 'e','Wr','-Host','it') "No Intune Managed Device found with name '$deviceName'..." -ForegroundColor Red
&("{1}{2}{0}" -f 't','Write','-Hos')

}

# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 10824 characters.