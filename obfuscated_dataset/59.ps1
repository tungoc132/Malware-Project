




function Get-AuthToken {



[cmdlparam
(
    [Parameter(Mandat[Parameter(Mandatory=$true)]
    $User
)

$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

Write-Host "Checking for AzureAD module..."

    $AadModule = Get-Module -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = Get-Module -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host "AzureAD Powershell module not installed..." -f Red
        write-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        write-host "Script can't continue..." -f Red
        write-host
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | select -Unique

            }

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null

[System.Reflectio<REDACTED: ObfuscatedLength = 8286>crosoft Corporation",
  "isFeatured": true,
  "appStoreUrl": "https://play.google.com/store/apps/details?id=com.microsoft.office.outlook&hl=en",
  "minimumSupportedOperatingSystem": {
    "@odata.type": "
    "v4_0": true
  }

}

"@



$Excel = @"

{
  "@odata.type": "
  "displayName": "Microsoft Excel",
  "description": "Microsoft Excel",
  "publisher": "Microsoft Corporation",
  "isFeatured": true,
  "appStoreUrl": "https://play.google.com/store/apps/details?id=com.microsoft.office.excel&hl=en",
  "minimumSupportedOperatingSystem": {
    "@odata.type": "
    "v4_0": true
  }

}

"@



$Browser = @"

{
  "@odata.type": "
  "displayName": "Intune Managed Browser",
  "description": "Intune Managed Browser",
  "publisher": "Microsoft Corporation",
  "isFeatured": true,
  "appStoreUrl": "https://play.google.com/store/apps/details?id=com.microsoft.intune.mam.managedbrowser&hl=en",
  "minimumSupportedOperatingSystem": {
    "@odata.type": "
    "v4_0": true
  }

}

"@



write-host "Publishing" ($Outlook | ConvertFrom-Json).displayName -ForegroundColor Yellow

$Create_Outlook = Add-AndroidApplication -JSON $Outlook

Write-Host "Application created as $($Create_Outlook.displayName)/$($create_Outlook.id)"
Write-Host



write-host "Publishing" ($Browser | ConvertFrom-Json).displayName -ForegroundColor Yellow

$Create_Browser = Add-AndroidApplication -JSON $Browser

Write-Host "Application created as $($Create_Browser.displayName)/$($create_Browser.id)"
Write-Host



write-host "Publishing" ($Excel | ConvertFrom-Json).displayName -ForegroundColor Yellow

$Create_Excel = Add-AndroidApplication -JSON $Excel

Write-Host "Application created as $($Create_Excel.displayName)/$($create_Excel.id)"
Write-Host