# [*] Obfuscating 49 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .("{0}{3}{2}{1}" -f'N','ect','j','ew-Ob') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

.("{0}{1}{2}"-f 'W','rite-Hos','t') "Checking for AzureAD module..."

    $AadModule = &("{0}{1}{2}"-f'Get-','Mod','ule') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &("{2}{0}{1}" -f 'rite-','Host','W') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = .("{2}{1}{0}" -f'Module','et-','G') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &("{2}{1}{0}" -f 'ost','rite-h','w')
        &("{2}{1}{0}"-f'host','rite-','w') "AzureAD Powershell module not installed..." -f Red
        &("{1}{2}{3}{0}"-f't','wr','ite-','hos') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        .("{1}{0}{2}"-f'ite-ho','wr','st') "Script can't continue..." -f Red
        .("{0}{2}{1}"-f'w','te-host','ri')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | .("{0}{2}{1}"-f's','ct','ele') version | .("{2}{0}{1}" -f 'O','bject','Sort-'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | .("{0}{1}"-f 'sele','ct') -Unique

            }

        $adal = .("{2}{1}{0}"-f'Path','in-','Jo') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{1}{2}{0}"-f 'th','Join-P','a') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = &("{1}{2}{0}"-f 'h','Joi','n-Pat') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{2}{0}{1}" -f 'oin-Pat','h','J') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | &("{0}{2}{1}" -f 'Out','ll','-Nu')

[System.Reflection.Assembly]::LoadFrom($adalforms) | &("{0}{2}{1}"-f'Out','Null','-')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = .("{1}{2}{0}" -f'ct','New-O','bje') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = &("{2}{1}{0}"-f 't','ew-Objec','N') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = &("{1}{0}{3}{2}" -f'ew-Obj','N','ct','e') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &("{0}{2}{1}" -f 'Write','st','-Ho')
        &("{2}{1}{0}"-f't','os','Write-H') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        .("{3}{2}{1}{0}" -f 'st','ite-Ho','r','W')
        break

        }

    }

    catch {

    &("{0}{2}{1}" -f 'wr','te-host','i') $_.Exception.Message -f Red
    .("{3}{2}{1}{0}"-f'st','o','rite-h','w') $_.Exception.ItemName -f Red
    .("{2}{0}{1}" -f 'te-','host','wri')
    break

    }

}



Function Get-RBACRole(){



[cmdletbinding()]

param
(
    $Name
)

$graphApiVersion = "v1.0"
$Resource = "deviceManagement/roleDefinitions"

    try {

        if($Name){

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
        (&("{3}{1}{2}{5}{0}{4}"-f'e','vok','e-R','In','thod','estM') -Uri $uri -Headers $authToken -Method Get).Value | &("{0}{2}{1}{3}"-f 'Wh','-Obje','ere','ct') { ($_.'displayName').contains("$Name") -and $_.isBuiltInRoleDefinition -eq $false }

        }

        else {

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
        (&("{0}{2}{3}{1}{4}" -f'Invok','estMeth','e','-R','od') -Uri $uri -Headers $authToken -Method Get).Value

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = .("{0}{2}{1}{3}"-f 'New','e','-Obj','ct') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    .("{2}{0}{1}" -f'ite-Ho','st','Wr') "Response content:`n$responseBody" -f Red
    &("{1}{2}{0}"-f'ror','Wr','ite-Er') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    .("{1}{3}{2}{0}"-f 't','writ','hos','e-')
    break

    }

}





.("{0}{2}{1}"-f 'writ','ost','e-h')


if($global:authToken){


    $DateTime = (.("{2}{0}{1}" -f 't-','Date','Ge')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        .("{3}{2}{1}{0}"-f't','hos','rite-','w') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        .("{1}{0}{2}"-f 'hos','write-','t')



            if($User -eq $null -or $User -eq ""){

            $User = &("{0}{1}" -f'Read-','Host') -Prompt "Please specify your user principal name for Azure Authentication"
            &("{2}{0}{1}" -f'-Ho','st','Write')

            }

        $global:authToken = &("{2}{1}{3}{0}" -f'Token','et-Au','G','th') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = .("{0}{1}{2}" -f'Read','-Hos','t') -Prompt "Please specify your user principal name for Azure Authentication"
    &("{1}{2}{0}"-f'te-Host','W','ri')

    }


$global:authToken = &("{3}{2}{0}{1}"-f'hTok','en','et-Aut','G') -User $User

}





$RBAC_Roles = &("{1}{0}{2}{3}" -f'RBAC','Get-','Rol','e')

foreach($RBAC_Role in $RBAC_Roles){

.("{0}{2}{1}" -f'w','t','rite-hos') $RBAC_Role.displayName -ForegroundColor Green
$RBAC_Role.RolePermissions.resourceActions.allowedResourceActions
&("{0}{1}{2}"-f'Write-H','os','t')

}