





function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandat[Parameter(Mandatory=$true)]
    $User
)

$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

Write-Host "Checking for AzureAD module..."

    $AadModule = Get-Module -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = Get-Module -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host "AzureAD Powershell module not installed..." -f Red
        write-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        write-host "Script can't continue..." -f Red
        write-host
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | select -Unique

            }

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDir<REDACTED: ObfuscatedLength = 10385>e specify your user principal name for Azure Authentication"
    Write-Host

    }


$global:authToken = Get-AuthToken -User $User

}





$AppConfigurations = Get-MobileAppConfigurations

if($AppConfigurations){

    foreach($AppConfiguration in $AppConfigurations){

        write-host "App Configuration Policy:"$AppConfiguration.displayName -f Yellow
        $AppConfiguration

        if($AppConfiguration.assignments){

            write-host "Getting App Configuration Policy assignment..." -f Cyan

            foreach($group in $AppConfiguration.assignments){

            (Get-AADGroup -id $group.target.GroupId).displayName

            }

        }

    }

}

else {

    Write-Host "No Mobile App Configurations found..." -ForegroundColor Red
    Write-Host

}

Write-Host



$TargetedManagedAppConfigurations = Get-TargetedManagedAppConfigurations

if($TargetedManagedAppConfigurations){

    foreach($TargetedManagedAppConfiguration in $TargetedManagedAppConfigurations){

    write-host "Targeted Managed App Configuration Policy:"$TargetedManagedAppConfiguration.displayName -f Yellow

    $PolicyId = $TargetedManagedAppConfiguration.id

    $ManagedAppConfiguration = Get-TargetedManagedAppConfigurations -PolicyId $PolicyId
    $ManagedAppConfiguration

        if($ManagedAppConfiguration.assignments){

            write-host "Getting Targetd Managed App Configuration Policy assignment..." -f Cyan

            foreach($group in $ManagedAppConfiguration.assignments){

            (Get-AADGroup -id $group.target.GroupId).displayName

            }

        }

    Write-Host

    }

}

else {

    Write-Host "No Targeted Managed App Configurations found..." -ForegroundColor Red
    Write-Host

}

# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 10385 characters.