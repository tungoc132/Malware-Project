




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

Set-Variable -Name userUpn -Value (New-Object "System.Net.Mail.MailAddress" -ArgumentList $User)

Set-Variable -Name tenant -Value ($userUpn.Host)

Write-Host "Checking for AzureAD module..."

    Set-Variable -Name AadModule -Value (Get-Module -Name "AzureAD" -ListAvailable)

    if ($AadModule -eq $null) {

        Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = Get-Module -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host "AzureAD Powershell module not installed..." -f Red
        write-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        write-host "Script can't continue..." -f Red
        write-host
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | select -Unique

            }

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        Set-Variable -Name adal -Value (Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll")
        Set-Variable -Name adalforms -Value (Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll")

    }

[Reflection.Assembly]::LoadFrom($adal) | Out-Null

[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null

Set-Variable -Name clientId -Value ("d1ddf0e4-d672-4dae-b554-9d5bdfd93547")

Set-Variable -Name redirectUri -Value ("urn:ietf:wg:oauth:2.0:oob")

Set-Variable -Name resourceAppIdURI -Value ("https://graph.microsoft.com")

Set-Variable -Name authority -Value ("https://login.microsoftonline.com/$Tenant")

    try {

    Set-Variable -Name authContext -Value (New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority)




    Set-Variable -Name platformParameters -Value (New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto")

    Set-Variable -Name userId -Value (New-Object "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId"))

    Set-Variable -Name authResult -Value ($authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result)



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        Write-Host
        Write-Host "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        Write-Host
        break

        }

    }

    catch {

    write-host $_.Exception.Message -f Red
    write-host $_.Exception.ItemName -f Red
    write-host
    break

    }

}



Function Get-IntuneMAMApplication(){



[cmdletbinding()]

$graphApiVersion = "Beta"
Set-Variable -Name Resource -Value ("deviceAppManagement/mobileApps")

    try {

    Set-Variable -Name uri -Value ("https://graph.microsoft.com/$graphApiVersion/$($resource)")
    (Invoke-RestMethod -Method Get -Headers $authToken -Uri $uri).Value | ? { ($_.'@odata.type').Contains("managed") }

    }

    catch {

    Set-Variable -Name ex -Value ($_.Exception)
    Set-Variable -Name errorResponse -Value ($ex.Response.GetResponseStream())
    Set-Variable -Name reader -Value (New-Object System.IO.StreamReader($errorResponse))
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    Set-Variable -Name responseBody -Value ($reader.ReadToEnd());
    Write-Host "Response content:`n$responseBody" -f Red
    Write-Error "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    write-host
    break

    }

}





write-host


if($global:authToken){


    $DateTime = (Get-Date).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        write-host "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        write-host



            if($User -eq $null -or $User -eq ""){

            $User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"
            Write-Host

            }

        $global:authToken = Get-AuthToken -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"
    Write-Host

    }


Set-Variable -Name global:authToken -Value (Get-AuthToken -User $User)

}





Get-IntuneMAMApplication