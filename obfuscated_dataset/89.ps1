# [*] Obfuscating 62 Command tokens.



function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .("{3}{2}{0}{1}"-f'w-Ob','ject','e','N') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&("{0}{2}{1}"-f 'Wri','e-Host','t') "Checking for AzureAD module..."

    $AadModule = &("{2}{0}{1}"-f'odul','e','Get-M') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        .("{1}{2}{0}" -f '-Host','Wri','te') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &("{2}{0}{1}" -f 't-Modu','le','Ge') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        .("{0}{1}{2}"-f 'write','-','host')
        .("{0}{1}{2}" -f 'writ','e-ho','st') "AzureAD Powershell module not installed..." -f Red
        &("{1}{3}{0}{2}"-f'e-ho','w','st','rit') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &("{2}{1}{0}"-f'-host','te','wri') "Script can't continue..." -f Red
        .("{0}{1}{2}"-f'write-','hos','t')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &("{0}{1}" -f'sel','ect') version | &("{2}{0}{1}{3}" -f'-','Obje','Sort','ct'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | .("{1}{0}"-f'lect','se') -Unique

            }

        $adal = &("{2}{0}{1}"-f 'oin-P','ath','J') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .("{1}{2}{0}"-f 'in-Path','J','o') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = &("{1}{0}" -f '-Path','Join') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .("{2}{3}{0}{1}" -f'-Pat','h','Joi','n') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | .("{0}{2}{1}"-f 'O','ull','ut-N')

[System.Reflection.Assembly]::LoadFrom($adalforms) | &("{1}{2}{0}" -f'-Null','O','ut')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = &("{2}{3}{0}{1}" -f 'e','ct','New-Ob','j') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = .("{3}{0}{2}{1}" -f'b','t','jec','New-O') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = .("{2}{3}{1}{0}" -f 't','c','New','-Obje') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        .("{3}{1}{2}{0}" -f'-Host','r','ite','W')
        &("{2}{3}{0}{1}"-f'o','st','Wr','ite-H') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        .("{1}{2}{0}"-f'ost','Wr','ite-H')
        break

        }

    }

    catch {

    .("{2}{0}{1}" -f 'ri','te-host','w') $_.Exception.Message -f Red
    &("{0}{2}{1}" -f'w','st','rite-ho') $_.Exception.ItemName -f Red
    .("{0}{3}{1}{2}"-f'wr','hos','t','ite-')
    break

    }

}



Function Get-RBACRole(){



$graphApiVersion = "v1.0"
$Resource = "deviceManagement/roleDefinitions"

    try {

    $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
    (&("{1}{5}{4}{0}{3}{2}"-f 'e-RestM','I','thod','e','k','nvo') -Uri $uri -Headers $authToken -Method Get).Value

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = .("{2}{1}{0}"-f'ect','Obj','New-') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    .("{1}{2}{0}" -f '-Host','W','rite') "Response content:`n$responseBody" -f Red
    &("{0}{1}{2}"-f 'Wr','ite-Err','or') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    .("{3}{0}{2}{1}"-f 'h','t','os','write-')
    break

    }

}





.("{0}{2}{1}"-f 'wri','e-host','t')


if($global:authToken){


    $DateTime = (&("{0}{1}" -f 'G','et-Date')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        &("{0}{2}{1}" -f'writ','host','e-') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        &("{2}{0}{1}"-f'e-h','ost','writ')



            if($User -eq $null -or $User -eq ""){

            $User = .("{1}{2}{0}" -f'ost','R','ead-H') -Prompt "Please specify your user principal name for Azure Authentication"
            .("{0}{2}{1}"-f'W','t','rite-Hos')

            }

        $global:authToken = .("{0}{3}{2}{1}" -f'Get-Auth','n','oke','T') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = .("{0}{2}{1}"-f'Re','d-Host','a') -Prompt "Please specify your user principal name for Azure Authentication"
    .("{2}{1}{0}" -f'Host','-','Write')

    }


$global:authToken = .("{3}{1}{2}{0}" -f'en','thT','ok','Get-Au') -User $User

}





$ExportPath = .("{2}{1}{0}" -f 'd-Host','a','Re') -Prompt "Please specify a path to export RBAC Intune Roles to e.g. C:\IntuneOutput"



    if(!(.("{1}{0}" -f'ath','Test-P') "$ExportPath")){

    &("{1}{0}{2}{3}" -f 'te','Wri','-H','ost')
    .("{2}{1}{0}"-f 'st','rite-Ho','W') "Path '$ExportPath' doesn't exist, do you want to create this directory? Y or N?" -ForegroundColor Yellow

    $Confirm = &("{1}{2}{3}{0}"-f'host','re','a','d-')

        if($Confirm -eq "y" -or $Confirm -eq "Y"){

        &("{1}{0}{2}" -f 'w-ite','ne','m') -ItemType Directory -Path "$ExportPath" | &("{0}{2}{1}" -f 'Out','ull','-N')
        &("{2}{1}{3}{0}"-f 'ost','i','Wr','te-H')

        }

        else {

        .("{0}{1}{2}" -f 'Writ','e-H','ost') "Creation of directory path was cancelled..." -ForegroundColor Red
        .("{2}{1}{0}"-f'ost','te-H','Wri')
        break

        }

    }

&("{3}{2}{0}{1}"-f'te-','Host','i','Wr')



$RBAC_Roles = (.("{0}{2}{3}{1}" -f 'G','CRole','e','t-RBA') | &("{2}{1}{0}{3}"-f 'Objec','re-','Whe','t') { $_.isBuiltIn -eq $false })

foreach($RBAC_Role in $RBAC_Roles){

    $RBAC_DisplayName = $RBAC_Role.displayName
    $RBAC_Description = $RBAC_Role.description

    $FileName_JSON = "$RBAC_DisplayName" + "_" + $(.("{2}{1}{0}"-f 'te','a','get-d') -f dd-MM-yyyy-H-mm-ss) + ".json"

    $RBAC_Actions = $RBAC_Role.RolePermissions.resourceActions.allowedResourceActions | .("{3}{2}{0}{1}" -f 'To-Js','on','t','Conver')

$JSON = @"
{
    "@odata.type": "
    "displayName": "$RBAC_DisplayName",
    "description": "$RBAC_Description",
    "rolePermissions": [
        {
        "resourceActions": [
        {
        "allowedResourceActions": $RBAC_Actions,
        "notAllowedResourceActions": []
        }
        ]
        }
    ],
    "isBuiltIn": false
}
"@

    $JSON | .("{2}{3}{1}{0}"-f 'tent','on','Set-','C') -LiteralPath "$ExportPath\$FileName_JSON"
    &("{1}{0}{3}{2}" -f'i','wr','host','te-') "JSON created in $ExportPath\$FileName_JSON..." -f cyan
    .("{0}{2}{1}"-f 'Wr','Host','ite-')


}