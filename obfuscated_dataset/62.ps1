# [*] Obfuscating 63 Command tokens.



function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = nEw`-`oBj`eCT "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

W`RiTE-HO`ST "Checking for AzureAD module..."

    $AadModule = Get-MO`du`le -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        WriT`E-H`osT "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = gEt-`M`OdUlE -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        w`RitE`-hOSt
        wR`I`TE-hOsT "AzureAD Powershell module not installed..." -f Red
        w`Rite-`HoSt "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        wRIte`-`Host "Script can't continue..." -f Red
        W`RIT`e-hO`St
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | SE`leCT version | SOR`T-`O`Bject)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | sE`Le`cT -Unique

            }

        $adal = jOI`N-Pa`TH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = jOin`-PA`TH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = j`OIn-pa`Th $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = j`oiN-P`Ath $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | ou`T`-nUlL

[System.Reflection.Assembly]::LoadFrom($adalforms) | OuT-Nu`ll

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = ne`W-OB`je`ct "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = Ne`W-`obJeCt "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = Ne`w`-obJecT "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        W`RitE-`HOsT
        w`Rit`e-HoST "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        wRIt`e-`hOsT
        break

        }

    }

    catch {

    w`RIte`-hOST $_.Exception.Message -f Red
    WR`ITe`-HOst $_.Exception.ItemName -f Red
    Writ`e`-hosT
    break

    }

}



Function Add-MDMApplication(){



[cmdletbinding()]

param
(
    $JSON
)

$graphApiVersion = "Beta"
$App_resource = "deviceAppManagement/mobileApps"

    try {

        if(!$JSON){

        w`RI`TE-`HOst "No JSON was passed to the function, provide a JSON variable" -f Red
        break

        }

        Te`St-`JsOn -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        in`VOKE-ReS`Tm`EtH`Od -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = nEW-o`B`jEcT System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    Wr`Ite-`hOST "Response content:`n$responseBody" -f Red
    WRite`-`ERR`oR "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    w`Ri`TE-hOST
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = conVE`R`TFrO`M-jS`On $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    w`RiTe-`hoSt "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}





W`RitE-H`ost


if($global:authToken){


    $DateTime = (Get-`Da`Te).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        w`RIte-`hosT "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        writ`e-H`o`ST



            if($User -eq $null -or $User -eq ""){

            $User = REaD-h`o`ST -Prompt "Please specify your user principal name for Azure Authentication"
            WrIte-`Ho`st

            }

        $global:authToken = GeT-a`UtH`ToKEn -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = R`e`AD-HO`ST -Prompt "Please specify your user principal name for Azure Authentication"
    wrIT`E-ho`ST

    }


$global:authToken = g`eT`-autHtoKEN -User $User

}





$ImportPath = rea`D-host -Prompt "Please specify a path to a JSON file to import data from e.g. C:\IntuneOutput\Policies\policy.json"


$ImportPath = $ImportPath.replace('"','')

if(!(TeSt`-pA`Th "$ImportPath")){

wr`iTE-`hOst "Import Path for JSON file doesn't exist..." -ForegroundColor Red
WRItE`-h`ost "Script can't continue..." -ForegroundColor Red
w`RItE-h`OsT
break

}



$JSON_Data = geT`-co`NTEnT "$ImportPath"


$JSON_Convert = $JSON_Data | CoN`VERTFrOM-j`soN | se`lect`-oBJECT -Property * -ExcludeProperty id,createdDateTime,lastModifiedDateTime,version,'@odata.context',uploadState,packageId,appIdentifier,publishingState,usedLicenseCount,totalLicenseCount,productKey,licenseType,packageIdentityName

$DisplayName = $JSON_Convert.displayName

$JSON_Output = $JSON_Convert | CO`Nvert`TO-`jsoN

w`R`ite-hOSt
WrIt`E-ho`sT "MDM Application '$DisplayName' Found..." -ForegroundColor Yellow
WR`ITE`-H`OSt
$JSON_Output
WR`i`Te-HOSt
WRI`T`e-`hOSt "MDM Application '$DisplayName'" -ForegroundColor Yellow
a`DD-md`mApPLI`c`ATion -JSON $JSON_Output