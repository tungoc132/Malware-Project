# [*] Obfuscating 53 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = N`EW-O`BJe`Ct "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

wr`i`Te-HosT "Checking for AzureAD module..."

    $AadModule = G`ET-M`oDulE -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        WriTe`-HO`sT "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = GEt-`MO`dUlE -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        Wr`ItE-h`O`sT
        Write-`Ho`St "AzureAD Powershell module not installed..." -f Red
        Wr`I`Te-`hOst "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        WR`itE`-hOST "Script can't continue..." -f Red
        WrIt`E`-H`oST
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | s`E`lECt version | So`Rt-`OBJect)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | sE`LeCt -Unique

            }

        $adal = Join-`P`A`Th $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = JOI`N-PaTh $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = jo`iN-P`Ath $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = JO`In-PATH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | o`U`T-NUlL

[System.Reflection.Assembly]::LoadFrom($adalforms) | OuT`-NUll

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = NE`W-ob`j`ect "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = nE`w-ob`JEcT "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = N`E`w-OBJE`CT "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        w`RiTe-`h`OST
        WRI`TE-H`O`St "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        Wr`ItE`-hoST
        break

        }

    }

    catch {

    WRiTe-`h`O`St $_.Exception.Message -f Red
    WRi`Te-H`OST $_.Exception.ItemName -f Red
    w`RI`T`e-hOST
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = cO`NveRT`FRo`m-J`sON $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    W`R`it`e-hOst "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}



Function Add-WebApplication(){



[cmdletbinding()]

param
(
    $JSON,
    $IconURL
)

$graphApiVersion = "Beta"
$App_resource = "deviceAppManagement/mobileApps"

    try {

        if(!$JSON){

        WR`ITe-`hoST "No JSON was passed to the function, provide a JSON variable" -f Red
        break

        }


        if($IconURL){

        wrI`Te-`VeRb`O`sE "Icon specified: $IconURL"

            if(!(t`Es`T-PATh "$IconURL")){

            wr`ITe-H`osT "Icon Path '$IconURL' doesn't exist..." -ForegroundColor Red
            WR`ItE-H`ost "Please specify a valid path..." -ForegroundColor Red
            WRIte`-HO`sT
            break

            }

        $iconResponse = iNVo`KE-weBreq`UE`St "$iconUrl"
        $base64icon = [System.Convert]::ToBase64String($iconResponse.Content)
        $iconExt = ([System.IO.Path]::GetExtension("$iconURL")).replace(".","")
        $iconType = "image/$iconExt"

        WrIT`E-`VeRBOSe "Updating JSON to add Icon Data"

        $U_JSON = conver`TFRom-`Js`oN $JSON

        $U_JSON.largeIcon.type = "$iconType"
        $U_JSON.largeIcon.value = "$base64icon"

        $JSON = cONvErtT`O-`j`S`On $U_JSON

        wrItE-`Verb`OSE $JSON

        tESt`-`jSON -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        iN`VOkE-re`S`T`M`EtHOD -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken

        }

        else {

        TE`sT`-JSON -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        in`Vo`kE-R`EStmEtHoD -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = nE`W-Obj`e`cT System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    Wr`It`e-Ho`st "Response content:`n$responseBody" -f Red
    W`RIT`e-`eRROR "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    wRiT`E`-H`Ost
    break

    }

}





wRiT`e`-HosT


if($global:authToken){


    $DateTime = (G`et-dAte).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        wRi`Te-H`oSt "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        W`Rite-`HOsT



            if($User -eq $null -or $User -eq ""){

            $User = Re`A`D-`HoSt -Prompt "Please specify your user principal name for Azure Authentication"
            wriTE-`Ho`St

            }

        $global:authToken = gE`T`-`AutHTOkeN -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = ReAd-H`ost -Prompt "Please specify your user principal name for Azure Authentication"
    w`RITE-h`osT

    }


$global:authToken = gEt-AU`Th`To`KEN -User $User

}







$iconUrl_Bing = "C:\IntuneIcons\MyApps.PNG"



$Bing = @"

{
    "@odata.type":"
    "displayName":"Bing Web Search",
    "description":"Bing Web Search",
    "publisher":"Intune Admin",
    "isFeatured":false,
    "appUrl":"https://www.bing.com",
    "useManagedBrowser":false,
    largeIcon: {
    "@odata.type": "
    "type": "$iconType",
    "value": "$base64icon"
    }
}

"@



W`R`I`Te-hOst "Publishing" ($Bing | coNVErtFr`Om-js`oN).displayName -ForegroundColor Yellow

$Create_Bing = aDd-We`Bapplica`TI`on -JSON $Bing -IconURL "$iconUrl_Bing"

WRi`T`E-`HoST "Application created as $($Create_Bing.displayName)/$($create_Bing.id)"
WRi`TE`-HosT

# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 8814 characters.