# [*] Obfuscating 87 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = &("{1}{2}{0}"-f'ct','N','ew-Obje') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&("{2}{1}{0}{3}" -f '-H','e','Writ','ost') "Checking for AzureAD module..."

    $AadModule = &("{0}{1}{2}" -f'Get','-Mo','dule') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &("{0}{1}{3}{2}" -f'W','r','te-Host','i') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &("{2}{1}{0}"-f'e','dul','Get-Mo') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &("{2}{1}{0}"-f'e-host','rit','w')
        &("{2}{1}{0}"-f '-host','ite','wr') "AzureAD Powershell module not installed..." -f Red
        &("{1}{2}{0}"-f 't','write-h','os') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &("{1}{2}{0}"-f't','w','rite-hos') "Script can't continue..." -f Red
        &("{0}{1}{3}{2}"-f'wri','te-h','st','o')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &("{0}{1}"-f 's','elect') version | &("{2}{0}{1}" -f'b','ject','Sort-O'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &("{0}{1}" -f'sele','ct') -Unique

            }

        $adal = &("{0}{1}{2}" -f 'Jo','in','-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{0}{1}" -f'Join','-Path') $AadModule.ModuleBase "Microsof<REDACTED: ObfuscatedLength = 13417>please specify a valid AAD Group..." -ForegroundColor Red
    &("{3}{0}{1}{2}"-f'r','ite-Ho','st','W')
    exit

    }

&("{1}{0}{3}{2}" -f 'e','Writ','Host','-')



$JSON = @"

{
  "@odata.type": "
  "displayName": "Graph RBAC Role Assigned",
  "description": "New RBAC Role Description",
  "permissions": [
    {
      "actions": [
        "Microsoft.Intune/MobileApps/Read",
        "Microsoft.Intune/TermsAndConditions/Read",
        "Microsoft.Intune/ManagedApps/Read",
        "Microsoft.Intune/ManagedDevices/Read",
        "Microsoft.Intune/DeviceConfigurations/Read",
        "Microsoft.Intune/TelecomExpenses/Read",
        "Microsoft.Intune/Organization/Read",
        "Microsoft.Intune/RemoteTasks/RebootNow",
        "Microsoft.Intune/RemoteTasks/RemoteLock"
      ]
    }
  ],
  "isBuiltInRoleDefinition": false
}

"@



&("{1}{0}{2}"-f 'ite-Hos','Wr','t') "Adding Intune Role from JSON..." -ForegroundColor Yellow
&("{1}{2}{0}"-f'e-Host','Wri','t') "Creating Intune Role via Graph"
$CreateResult = &("{2}{1}{3}{0}"-f 'Role','dd','A','-RBAC') -JSON $JSON
&("{2}{1}{0}" -f'e-host','it','wr') "Intune Role created with id" $CreateResult.id

$IntuneRoleID = $CreateResult.id

&("{0}{1}{2}" -f 'W','rite-','Host')

&("{0}{2}{1}"-f'Write-','ost','H') "Creating Intune Role Assignment..." -ForegroundColor Yellow
&("{1}{0}{2}"-f 't','Wri','e-Host') "Creating Intune Role Assignment via Graph"

$AssignmentIntuneRole = &("{1}{3}{0}{2}{4}" -f 'Ro','Ass','l','ign-RBAC','e') -Id $IntuneRoleID -DisplayName "Assignment" -MemberGroupId $MemberGroupId -TargetGroupId $TargetGroupId
&("{2}{0}{1}"-f'ite-ho','st','wr') "Intune Role Assigment created with id" $AssignmentIntuneRole.id

&("{2}{0}{1}"-f 'ite-Hos','t','Wr')


# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 13417 characters.