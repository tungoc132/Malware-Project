# [*] Obfuscating 123 Command tokens.



 
function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = &("{1}{0}{2}"-f 'e','N','w-Object') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&("{0}{2}{1}" -f 'Wri','ost','te-H') "Checking for AzureAD module..."

    $AadModule = &("{2}{1}{3}{0}" -f'le','o','Get-M','du') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &("{1}{2}{0}{3}" -f'te-','W','ri','Host') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &("{2}{1}{0}{3}" -f't-Modu','e','G','le') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &("{0}{2}{3}{1}" -f 'w','t','rite','-hos')
        &("{2}{0}{3}{1}" -f'o','t','write-h','s') "AzureAD Powershell module not installed..." -f Red
        &("{1}{0}{2}" -f 'os','write-h','t') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &("{1}{3}{2}{0}" -f'ost','w','e-h','rit') "Script can't continue..." -f Red
        &("{2}{1}{0}"-f 'host','rite-','w')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &("{0}{1}" -f'sel','ect') version | &("{0}{2}{1}" -f'So','Object','rt-'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &("{1}{0}"-f'elect','s') -Unique

            }

        $adal = &("{1}{2}{0}" -f 'Path','Joi','n-') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{3}{1}{0}{2}"-f 'P','-','ath','J<REDACTED: ObfuscatedLength = 19877>).contains("$ScopeTagId")){

                            $ST = @($DCP.roleScopeTagIds) + @("$ScopeTagId")

                            $Result = &("{2}{5}{4}{3}{0}{1}"-f'gu','rationPolicy','Upd','ceConfi','-Devi','ate') -id $Policy.id -Type $Policy.'@odata.type' -ScopeTags $ST

                            if($Result -eq ""){

                                &("{2}{0}{1}" -f 'te','-Host','Wri') "Configuration Policy '$DCP_DN' patched with '$ScopeTag_DN' ScopeTag..." -ForegroundColor Green

                            }

                        }

                        else {

                            &("{2}{0}{1}" -f'it','e-Host','Wr') "Scope Tag '$ScopeTag_DN' already assigned to '$DCP_DN'..." -ForegroundColor Red

                        }

                    }

                    else {

                        $ST = @("$ScopeTagId")

                        $Result = &("{2}{0}{5}{3}{1}{4}" -f'ate','ig','Upd','ceConf','urationPolicy','-Devi') -id $Policy.id -Type $Policy.'@odata.type' -ScopeTags $ST

                        if($Result -eq ""){

                            &("{1}{0}{2}" -f 'rite-H','W','ost') "Configuration Policy '$DCP_DN' patched with '$ScopeTag_DN' ScopeTag..." -ForegroundColor Green

                        }

                    }

                }

            }

            &("{2}{1}{0}" -f '-Host','e','Writ')





        }

    }

    else {

        &("{1}{2}{0}"-f'st','Write','-Ho') "No Scope Tags configured..." -ForegroundColor Red

    }

}

else {

    &("{0}{1}{2}" -f 'Writ','e-','Host') "Addition of Scope Tags to all Configuration and Compliance Policies was cancelled..." -ForegroundColor Yellow

}

&("{1}{0}{2}" -f 'e-','Writ','Host')

# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 19877 characters.