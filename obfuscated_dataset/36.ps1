




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandat[Parameter(Mandatory)]
    $User

)

$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

Write-Host "Checking for AzureAD module..."

    $AadModule = Get-Module -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = Get-Module -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host "AzureAD Powershell module not installed..." -f Red
        write-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        write-host "Script can't continue..." -f Red
        write-host
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null

[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null
 


$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$r<REDACTED: ObfuscatedLength = 8397> = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"
            Write-Host

            }

        $global:authToken = Get-AuthToken -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = Read-Host -Prompt "Please specify your user principal name for Azure Authentication"
    Write-Host

    }


$global:authToken = Get-AuthToken -User $User

}





$PSScripts = Get-DeviceManagementScripts

if($PSScripts){

    write-host "-------------------------------------------------------------------"
    Write-Host

    $PSScripts | foreach {

    $ScriptId = $_.id
    $DisplayName = $_.displayName

    Write-Host "PowerShell Script: $DisplayName..." -ForegroundColor Yellow

    $_

    write-host "Device Management Scripts - Assignments" -f Cyan

    $Assignments = $_.groupAssignments.targetGroupId

        if($Assignments){

            foreach($Group in $Assignments){

            (Get-AADGroup -id $Group).displayName

            }

            Write-Host

        }

        else {

        Write-Host "No assignments set for this policy..." -ForegroundColor Red
        Write-Host

        }

    $Script = Get-DeviceManagementScripts -ScriptId $ScriptId

    $ScriptContent = $Script.scriptContent

    Write-Host "Script Content:" -ForegroundColor Cyan

    [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String("$ScriptContent"))

    Write-Host
    write-host "-------------------------------------------------------------------"
    Write-Host

    }

}

else {

Write-Host
Write-Host "No PowerShell scripts have been added to the service..." -ForegroundColor Red
Write-Host

}


# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 8397 characters.