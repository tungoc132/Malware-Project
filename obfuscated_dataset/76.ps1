[*] Obfuscating 45 Command tokens.



function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('New'+'-'+'Object') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

.('Write-Ho'+'s'+'t') "Checking for AzureAD module..."

    $AadModule = &('Get'+'-M'+'od'+'ule') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &('Wri'+'te-'+'Hos'+'t') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = .('Get-'+'M'+'odule') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &('w'+'ri'+'te-host')
        .('wri'+'te-h'+'ost') "AzureAD Powershell module not installed..." -f Red
        .('wr'+'ite-ho'+'st') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &('write'+'-h'+'ost') "Script can't continue..." -f Red
        &('write-'+'hos'+'t')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &('se'+'lect') version | &('So'+'rt-O'+'bject'))[-1]

        $aadModule = $AadModule | .('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | .('s'+'e'+'lect') -Unique

            }

        $adal = &('J'+'oi'+'n-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Join'+'-'+'Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = .('Jo'+'in'+'-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &('Join'+'-P'+'ath') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | .('O'+'ut-Nu'+'ll')

[System.Reflection.Assembly]::LoadFrom($adalforms) | .('Ou'+'t'+'-Null')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = .('N'+'ew-O'+'bj'+'ect') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = &('New-O'+'bj'+'ect') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = .('New-'+'O'+'bje'+'ct') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &('Wr'+'ite-Hos'+'t')
        .('Write'+'-Hos'+'t') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        &('Wr'+'it'+'e-Hos'+'t')
        break

        }

    }

    catch {

    .('write'+'-h'+'ost') $_.Exception.Message -f Red
    .('writ'+'e'+'-host') $_.Exception.ItemName -f Red
    &('write'+'-h'+'ost')
    break

    }

}



Function Get-IntuneBrand(){



[cmdletbinding()]

$graphApiVersion = "Beta"
$Resource = "deviceManagement/intuneBrandingProfiles"

    try {

    $uri = "https://graph.microsoft.com/$graphApiVersion/$($resource)"
    (.('I'+'nvo'+'ke'+'-'+'Res'+'tMethod') -Uri $uri -Headers $authToken -Method Get).value

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = .('New-'+'Obje'+'ct') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    &('Writ'+'e-'+'Host') "Response content:`n$responseBody" -f Red
    .('W'+'rite-Erro'+'r') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    .('w'+'r'+'i'+'te-host')
    break

    }

}





&('wr'+'ite-'+'host')


if($global:authToken){


    $DateTime = (&('G'+'et-Dat'+'e')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        &('write-'+'ho'+'st') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        .('write-h'+'o'+'s'+'t')



            if($User -eq $null -or $User -eq ""){

            $User = &('Rea'+'d-H'+'ost') -Prompt "Please specify your user principal name for Azure Authentication"
            &('Wr'+'i'+'te-Host')

            }

        $global:authToken = .('Ge'+'t-AuthTo'+'k'+'e'+'n') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = .('Re'+'ad-Ho'+'st') -Prompt "Please specify your user principal name for Azure Authentication"
    .('Write'+'-H'+'o'+'st')

    }


$global:authToken = .('Get-'+'Aut'+'hToken') -User $User

}





.('Ge'+'t'+'-I'+'ntuneB'+'rand')