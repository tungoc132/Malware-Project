# [*] Obfuscating 76 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('N'+'ew'+'-Object') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

.('W'+'rite-Hos'+'t') "Checking for AzureAD module..."

    $AadModule = .('G'+'et'+'-Module') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        .('W'+'rite-'+'Ho'+'st') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = .('G'+'et'+'-Mod'+'ule') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &('w'+'rite-h'+'ost')
        .('writ'+'e-ho'+'st') "AzureAD Powershell module not installed..." -f Red
        &('wr'+'ite-hos'+'t') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &('w'+'rite-hos'+'t') "Script can't continue..." -f Red
        .('wr'+'i'+'te-host')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &('selec'+'t') version | &('Sort'+'-Obj'+'ect'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &('s'+'elect') -Unique

            }

        $adal = &('J'+'oin-Pat'+'h') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Join-P'+'a'+'th') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = .('Joi'+'n'+'-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &('Join'+'-Pat'+'h') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | .('Out-Nul'+'l')

[System.Reflection.Assembly]::LoadFrom($adalforms) | &('O'+'ut-'+'Null')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = &('New-'+'O'+'bject') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = .('New-'+'Objec'+'t') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = &('N'+'e'+'w'+'-Object') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &('Wri'+'te-'+'Host')
        .('Write'+'-H'+'o'+'st') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        .('Wr'+'ite-'+'H'+'ost')
        break

        }

    }

    catch {

    .('wr'+'ite-h'+'ost') $_.Exception.Message -f Red
    .('w'+'rite-h'+'ost') $_.Exception.ItemName -f Red
    &('w'+'ri'+'te-host')
    break

    }

}



Function Get-IntuneBrand(){



[cmdletbinding()]

$graphApiVersion = "Beta"
$Resource = "deviceManagement/intuneBrand"

    try {

    $uri = "https://graph.microsoft.com/$graphApiVersion/$($resource)"
    &('In'+'vok'+'e-RestMeth'+'od') -Uri $uri -Headers $authToken -Method Get

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = .('New'+'-Objec'+'t') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    &('Wr'+'ite-'+'Host') "Response content:`n$responseBody" -f Red
    &('Wr'+'ite-Er'+'ro'+'r') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    &('wr'+'it'+'e-host')
    break

    }

}



Function Export-JSONData(){



param (

$JSON,
$ExportPath

)

    try {

        if($JSON -eq "" -or $JSON -eq $null){

        .('w'+'rite-ho'+'st') "No JSON specified, please specify valid JSON..." -f Red

        }

        elseif(!$ExportPath){

        &('write-'+'ho'+'st') "No export path parameter set, please provide a path to export the file" -f Red

        }

        elseif(!(&('Te'+'st-'+'Path') $ExportPath)){

        .('write'+'-h'+'ost') "$ExportPath doesn't exist, can't export JSON Data" -f Red

        }

        else {

        $JSON1 = .('Conv'+'ertT'+'o-J'+'son') $JSON -Depth 5

        $JSON_Convert = $JSON1 | &('Co'+'n'+'vertF'+'ro'+'m-Json')

        $displayName = $JSON_Convert.displayName


        $DisplayName = $DisplayName -replace '\<|\>|:|"|/|\\|\||\?|\*', "_"

        $Properties = ($JSON_Convert | &('Get'+'-M'+'embe'+'r') | .('?') { $_.MemberType -eq "NoteProperty" }).Name

            $FileName_JSON = "$DisplayName" + "_" + $(&('get-d'+'ate') -f dd-MM-yyyy-H-mm-ss) + ".json"

            $Object = &('N'+'ew-O'+'bject') System.Object

                foreach($Property in $Properties){

                $Object | .('Add-Mem'+'b'+'er') -MemberType NoteProperty -Name $Property -Value $JSON_Convert.$Property

                }

            &('wri'+'te'+'-'+'host') "Export Path:" "$ExportPath"

            $JSON1 | &('Set'+'-Cont'+'e'+'nt') -LiteralPath "$ExportPath\$FileName_JSON"
            &('writ'+'e-'+'host') "JSON created in $ExportPath\$FileName_JSON..." -f cyan

        }

    }

    catch {

    $_.Exception

    }

}





&('writ'+'e'+'-'+'host')


if($global:authToken){


    $DateTime = (.('G'+'et-'+'Date')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        &('write-'+'h'+'ost') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        .('wr'+'ite-'+'host')



            if($User -eq $null -or $User -eq ""){

            $User = .('Read-H'+'o'+'st') -Prompt "Please specify your user principal name for Azure Authentication"
            .('W'+'rite'+'-Host')

            }

        $global:authToken = .('G'+'et-'+'AuthT'+'oken') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = &('Read-'+'Ho'+'st') -Prompt "Please specify your user principal name for Azure Authentication"
    &('Wri'+'te-H'+'o'+'st')

    }


$global:authToken = .('Get-'+'Auth'+'T'+'oke'+'n') -User $User

}





$ExportPath = &('Read'+'-Hos'+'t') -Prompt "Please specify a path to export Company Portal Branding data to e.g. C:\IntuneOutput"


    $ExportPath = $ExportPath.replace('"','')

    if(!(&('Te'+'st-P'+'ath') "$ExportPath")){

    &('Writ'+'e-'+'Host')
    &('W'+'rite-'+'Host') "Path '$ExportPath' doesn't exist, do you want to create this directory? Y or N?" -ForegroundColor Yellow

    $Confirm = &('re'+'ad-hos'+'t')

        if($Confirm -eq "y" -or $Confirm -eq "Y"){

        &('new-'+'item') -ItemType Directory -Path "$ExportPath" | .('Out'+'-Null')
        .('Write-'+'H'+'os'+'t')

        }

        else {

        &('W'+'r'+'ite-Hos'+'t') "Creation of directory path was cancelled..." -ForegroundColor Red
        &('Wri'+'te'+'-'+'Host')
        break

        }

    }

.('Writ'+'e-'+'Ho'+'st')



$IntuneBrand = .('Get-'+'Intune'+'Bra'+'n'+'d')

if($IntuneBrand.displayName){

    .('write-'+'h'+'o'+'st') "Exporting Company Portal Branding" -f Yellow
    .('Export'+'-JSO'+'NDa'+'ta') -JSON $IntuneBrand -ExportPath "$ExportPath"
    .('Wr'+'ite'+'-Hos'+'t')

}

else {

    .('Wri'+'te-Hos'+'t') "Company Portal Branding is set as default..." -ForegroundColor Red
    .('w'+'rit'+'e-'+'host') "Company Name property is required at a minimum..." -ForegroundColor Red
    .('W'+'r'+'ite-Host')

}