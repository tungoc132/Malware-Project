# [*] Obfuscating 66 Command tokens.



function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('New-Obje'+'c'+'t') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&('Write-'+'H'+'ost') "Checking for AzureAD module..."

    $AadModule = &('Get-M'+'o'+'dule') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        .('Wr'+'ite-H'+'ost') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &('Get-Mo'+'d'+'ule') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &('write-'+'h'+'ost')
        &('writ'+'e-h'+'o'+'st') "AzureAD Powershell module not installed..." -f Red
        &('wr'+'ite-'+'h'+'ost') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &('write'+'-'+'host') "Script can't continue..." -f Red
        .('write-'+'h'+'ost')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | .('s'+'elect') version | .('Sor'+'t-O'+'b'+'ject'))[-1]

        $aadModule = $AadModule | .('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | .('selec'+'t') -Unique

            }

        $adal = .('J'+'o'+'in-Pat'+'h') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &('J'+'oin'+'-'+'Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = .('Joi'+'n-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &('J'+'oin-'+'Pat'+'h') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | .('O'+'ut'+'-Null')

[System.Reflection.Assembly]::LoadFrom($adalforms) | .('Ou'+'t-N'+'ull')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = &('New'+'-Ob'+'ject') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = .('New-O'+'bje'+'ct') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = &('N'+'ew-O'+'bject') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &('Write'+'-'+'Host')
        &('Writ'+'e-Ho'+'st') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        &('Writ'+'e'+'-Host')
        break

        }

    }

    catch {

    &('wr'+'ite-hos'+'t') $_.Exception.Message -f Red
    &('writ'+'e-ho'+'s'+'t') $_.Exception.ItemName -f Red
    &('wri'+'te'+'-h'+'ost')
    break

    }

}



Function Get-DirectoryRoles(){



[cmdletbinding()]

param
(
    $RoleId,
    [ValidateSet("members")]
    [string]
    $Property
)


$graphApiVersion = "v1.0"
$Resource = "directoryRoles"

    try {

        if($RoleId -eq "" -or $RoleId -eq $null){

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
        (.('Invo'+'ke-R'+'es'+'tMethod') -Uri $uri -Headers $authToken -Method Get).Value

        }

        else {

            if($Property -eq "" -or $Property -eq $null){

            $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)/$RoleId"
            .('I'+'nvoke-Res'+'tM'+'ethod') -Uri $uri -Headers $authToken -Method Get

            }

            else {

            $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)/$RoleId/$Property"
            (&('Inv'+'o'+'ke-Rest'+'Method') -Uri $uri -Headers $authToken -Method Get).Value

            }

        }

    }

    catch {

        $ex = $_.Exception
        $errorResponse = $ex.Response.GetResponseStream()
        $reader = &('Ne'+'w-Objec'+'t') System.IO.StreamReader($errorResponse)
        $reader.BaseStream.Position = 0
        $reader.DiscardBufferedData()
        $responseBody = $reader.ReadToEnd();
        .('Wri'+'te-'+'H'+'ost') "Response content:`n$responseBody" -f Red
        &('W'+'ri'+'te-Er'+'ror') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
        &('wri'+'te'+'-host')
        break

    }

}





&('writ'+'e'+'-host')


if($global:authToken){


    $DateTime = (&('Get'+'-Date')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        .('write'+'-ho'+'st') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        &('wr'+'i'+'te-'+'host')



            if($User -eq $null -or $User -eq ""){

            $User = &('Re'+'ad-Hos'+'t') -Prompt "Please specify your user principal name for Azure Authentication"
            &('Wri'+'t'+'e-Host')

            }

        $global:authToken = &('Get'+'-A'+'uthToken') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = .('Rea'+'d-H'+'ost') -Prompt "Please specify your user principal name for Azure Authentication"
    .('Wri'+'te-'+'Ho'+'st')

    }


$global:authToken = &('Get'+'-Au'+'thTo'+'ken') -User $User

}






.('W'+'ri'+'te-Hos'+'t') "Please specify which Directory Role you want to query for User membership:" -ForegroundColor Yellow
.('Wri'+'t'+'e-Ho'+'st')

$Roles = (.('Get-Dire'+'ctoryR'+'ol'+'e'+'s') | .('Sel'+'e'+'ct-'+'Obje'+'ct') displayName).displayName | .('S'+'ort-Obj'+'ect')

$menu = @{}

for ($i=1;$i -le $Roles.count; $i++)
{ .('Writ'+'e-Ho'+'st') "$i. $($Roles[$i-1])"
$menu.Add($i,($Roles[$i-1]))}

&('Wr'+'ite-H'+'ost')

[int]$ans = &('R'+'ea'+'d-Host') 'Enter Directory Role to query (Numerical value)'

$selection = $menu.Item($ans)

    if($selection){

    .('Wri'+'te-Ho'+'st')
    &('Wr'+'it'+'e-Host') $selection -f Cyan

    $Directory_Role = (&('G'+'e'+'t-'+'Direct'+'oryRoles') | .('Where-Obj'+'e'+'c'+'t') { $_.displayName -eq "$Selection" })

    $Members = .('Get-'+'D'+'irectory'+'Role'+'s') -RoleId $Directory_Role.id -Property members

        if($Members){

            $Members | &('For'+'Eac'+'h-'+'Object') { $_.displayName + " - " + $_.userPrincipalName }

        }

        else {

            &('Write-'+'Hos'+'t') "No Users assigned to '$selection' Directory Role..." -ForegroundColor Red

        }

    }

    else {

        .('Writ'+'e-'+'Ho'+'st')
        &('W'+'rite-'+'Host') "Directory Role specified is invalid..." -ForegroundColor Red
        &('Writ'+'e'+'-Host') "Please specify a valid Directory Role..." -ForegroundColor Red
        .('Wr'+'it'+'e-Host')
        break

    }

.('Write'+'-Hos'+'t')