
#[*] Obfuscating 53 Command tokens.



function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = NEw-Ob`j`eCT "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

wrI`T`e-ho`ST "Checking for AzureAD module..."

    $AadModule = gEt`-m`O`DulE -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        Wr`ITe-Ho`ST "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = G`eT-mod`ULE -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        W`RItE-`HOst
        w`RiTE-ho`ST "AzureAD Powershell module not installed..." -f Red
        wRi`T`e`-hOst "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        wrI`T`e`-HOsT "Script can't continue..." -f Red
        WrI`TE-`Ho`sT
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | se`Le`ct version | S`ORT`-oBJECT)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | Se`LEcT -Unique

            }

        $adal = j`o`IN-PATH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = JO`I`N-`pAtH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = JOIN`-pA`Th $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = joIN`-`PA`TH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom<REDACTED: ObfuscatedLength = 8430>//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AvuakogAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAz5JREFUOE+tVTtu4zAQHQjppmWzwIJbEVCzpTpjbxD3grQHSOXKRXgCAT6EC7UBVAmp3KwBnmvfzNCyZTmxgeTZJsXx43B+HBHRE34ZkXgkerXFTheeiCkRrbB4UXmp4wSWz5raaQEMTM5TZwuiXoaKgV+6FsmkZQcSy0kA71yMTMGHanX+AzMMGLAQCxU1F/ZwjULPugazl82GM0NEKm/U8EqFwEkO3/EAT4grgl0nucwlk9pcpTTJ4VPA4g/Rb3yIRhhp507e9nTQmZ1OS5RO4sS7nIRPEeHXCHdkw9ZEW2yVE5oIS7peD58Avs7CN+PVCmHh21oOqBdjDzIs+FldPJ74TFESUSJEfVzy9U/dhu+AuOT6eBp6gGKyXEx8euO450ZE4CMfstMFT44broWw/itkYErWXRx+fFArt9Ca9os78TFed0LVIUsmIHrwbwaw3BEOnOk94qVpQ6Ka2HjxewJnfyd6jUtGDQLdWlzmYNYLeKbbGOucJsNabCq1Yub0o92rtR+i30V2dapxYVEePXcOjeCKPnYyit7BtKeNlZqHbr+gt7i+AChWA9RsRs03pxTQc67ouWpxyESvjK5Vs3DVSy3IpkxPm5X+wZoBi+MFHWW69/w8FRhc7VBe6HAhMB2b8Q0XqDzTNZtXUMnKMjwKVaCrB/CSUL7WSx/HsdJC86lFGXwnioTeOMPjV+szlFvrZLA5VMVK4y+41l4e1xfx7Z88o4hkilRUH/qKqwNVlgDgpvYCpH3XwAy5eMCRnezIUxffVXoDql2rTHFDO+pjWnTWzAfrYXn6BFECblUpWGrvPZvBipETjS5ydM7tdXpH41ZCEbBNy/+wFZu71QO2t9pgT+iZEf657Q1vpN94PQNDxUHeKR103LV9nPVOtDikcNKO+2naCw7yKBhOe9Hm79pe8C4/CfC2wDjXnqC94kEeBU3WwN7dt/2UScXas7zDl5GpkY+M8WKv2J7fd4Ib2rGTk+jsC2cleEM7jI9veF7B0MBJrsZqfKd/81q9pR2NZfwJK2JzsmIT1Ns8jUH0UusQBpU8d2JzsHiXg1zXGLqxfitUNTDT/nUUeqDBp2HZVr+Ocqi/Ty3Rf4Jn82xxfSNtAAAAAElFTkSuQmCC"
  },
  "notes": "",
  "owner": "Microsoft",
  "privacyInformationUrl": "",
  "publisher": "Microsoft"
}

"@



W`RIt`E`-hosT "Publishing" ($JSON | cOnv`ErT`FROm-`jSOn).displayName -ForegroundColor Yellow

$Create_Application = AD`d-M`DmapPLiCAT`ION -JSON $JSON

$Create_Application

wr`iT`e-ho`st "Application created as $($Create_Application.displayName)/$($create_Application.id)" -ForegroundColor Cyan

w`R`ite-hOSt


# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 8430 characters.