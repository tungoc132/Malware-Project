

param([string]$Tag)

function AbortIfProcessFailed {
    param([string]$message)
    if ($LASTEXITCODE) { throw $message }
    exit $LASTEXITCODE
}

function AbortIfDirtyWorkingDirectory {
    if (@(git status --short).Count -ne 0) {
        throw ("{5}{4}{3}{0}{2}{1}"-f'ed chan','s ','ge','mit','m','unco')
        exit 1
    }
}

function AbortIfGitNotAvailable {
    get-command git -erroraction stop > $null
}

function AbortIfNotOnMaster {
    if (@(git branch | select-string ("{1}{0}"-f 'ster','* ma') -simplematch).Count -eq 0) {
        throw ((("{4}{6}{5}{0}{2}{3}{1}" -f 'on YRvmas',' branch','terYR','v','n','t ','o'))  -rEPlaCe  'YRv',[cHaR]39)
        exit 1
    }
}

$toDelete = @(
    ("{2}{1}{0}" -f 'est.json','nif','ma'),
    ("{0}{1}" -f't','ests'),
    "bin"
)

AbortIfGitNotAvailable
AbortIfDirtyWorkingDirectory
AbortIfNotOnMaster

try {
    push-location $PSScriptRoot\..

    remove-item -recurse $toDelete -exclude ("{0}{1}{2}"-f 'Pub','lish','.ps1') -whatif

    write-warning ("{3}{2}{1}{5}{6}{10}{4}{9}{7}{8}{0}" -f'm','mit the ','m','co','ag','fil','es, ','and pus','h upstrea',' ','t')
}
finally {
    pop-location
}