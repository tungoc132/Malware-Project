# [*] Obfuscating 82 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('N'+'ew-Obje'+'ct') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

.('Wri'+'te-Hos'+'t') "Checking for AzureAD module..."

    $AadModule = .('G'+'et-'+'Module') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        .('Write-H'+'os'+'t') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = .('Get-Mod'+'ul'+'e') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &('w'+'r'+'ite-host')
        &('wr'+'ite-'+'host') "AzureAD Powershell module not installed..." -f Red
        .('w'+'rite-'+'host') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        .('write-ho'+'s'+'t') "Script can't continue..." -f Red
        .('w'+'r'+'it'+'e-host')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &('se'+'lec'+'t') version | .('Sort-'+'O'+'bject'))[-1]

        $aadModule = $AadModule | .('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &('s'+'elect') -Unique

            }

        $adal = .('J'+'oin-Pa'+'th') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Joi'+'n-'+'Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = .('Join'+'-'+'Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = <REDACTED: ObfuscatedLength = 9477>ice Type:"$Device.deviceType
            &('wri'+'te-h'+'ost') "Last Sync Date Time:"$Device.lastSyncDateTime
            .('w'+'r'+'ite-host') "Enrolled Date Time:"$Device.enrolledDateTime
            .('wri'+'te-ho'+'st') "Jail Broken:"$Device.jailBroken
            .('wr'+'ite-'+'hos'+'t') "Compliance State:"$Device.complianceState
            &('wr'+'i'+'te'+'-host') "Enrollment Type:"$Device.enrollmentType
            .('w'+'rit'+'e-hos'+'t') "AAD Registered:"$Device.aadRegistered
            .('wr'+'ite'+'-host') "Management Agent:"$Device.managementAgent

            $EnrolledTime = [datetimeoffset]::Parse($EDT)

            $TimeDifference = $CurrentTime - $EnrolledTime

            $TotalMinutes = ($TimeDifference.TotalMinutes).tostring().split(".")[0]

            .('wr'+'ite-'+'host')
            &('wri'+'te-hos'+'t') "Date Time difference is"$TotalMinutes "minutes from current date time..." -ForegroundColor Yellow
            .('Wri'+'te'+'-'+'Host')

            }

        }

        else {

        .('writ'+'e-'+'ho'+'st') "No Devices not checked in the last $minutes minutes found..." -f green
        .('W'+'rite-Ho'+'st')

        }

    }

    catch {

    &('W'+'rite-H'+'ost')
    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = .('New'+'-O'+'bject') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    .('Wri'+'te'+'-Host') "Response content:`n$responseBody" -f Red
    &('Write-'+'Er'+'ror') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    .('W'+'rite-'+'Hos'+'t')

    break

    }


# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 9477 characters.