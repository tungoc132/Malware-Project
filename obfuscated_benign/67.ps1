# [*] Obfuscating 62 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = N`ew-o`BJ`ect "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

wri`Te-`H`oST "Checking for AzureAD module..."

    $AadModule = geT-MO`dU`lE -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        wrI`TE-`HOsT "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = g`E`T-MOdu`LE -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        WR`It`e-hO`St
        WriT`E`-hosT "AzureAD Powershell module not installed..." -f Red
        wRiTE`-h`OSt "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        WRi`T`E-HOsT "Script can't continue..." -f Red
        wRit`e`-h`Ost
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | S`elEcT version | so`Rt-OB`J`eCT)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | seLE`Ct -Unique

            }

        $adal = J`OiN-`Pa`TH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = j`oin-pAtH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = J`o`IN-pATh $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = J`Oin-PA`Th $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | ou`T-N`Ull

[System.Reflection.Assembly]::LoadFrom($adalforms) | ouT-`NU`LL

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = n`eW-o`Bject "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = neW-`OB`jeCt "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = NEw-O`BJe`ct "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        wRI`TE-`hOST
        WRItE-H`O`st "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        WRITE`-h`oST
        break

        }

    }

    catch {

    wRit`e-`HoST $_.Exception.Message -f Red
    w`R`iTE-HoSt $_.Exception.ItemName -f Red
    wrI`T`e-ho`st
    break

    }

}



Function Get-ApplicationCategory(){



[cmdletbinding()]

param
(
    $Name
)

$graphApiVersion = "Beta"
$Resource = "deviceAppManagement/mobileAppCategories"

    try {

        if($Name){

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
        (IN`VoK`E-REstm`EtHOd -Uri $uri -Headers $authToken -Method Get).Value | wHER`E-`objECT { ($_.'displayName').contains("$Name") }

        }

        else {

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
        (i`NvoKe-`Re`stMeTH`oD -Uri $uri -Headers $authToken -Method Get).Value

        }

    }

    catch {

    $ex = $_.Exception
    Writ`e-Ho`ST "Request to $Uri failed with HTTP Status $([int]$ex.Response.StatusCode) $($ex.Response.StatusDescription)" -f Red
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = N`E`w`-objeCT System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    Wri`Te-`HO`St "Response content:`n$responseBody" -f Red
    WrITE`-Err`oR "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    w`Ri`TE-h`oST
    break

    }

}



Function Remove-ApplicationCategory(){



[cmdletbinding()]

param
(
    $id
)

$graphApiVersion = "Beta"
$Resource = "deviceAppManagement/mobileAppCategories"

    try {

        if($id -eq "" -or $id -eq $null){

        Wri`TE-ho`st "No id specified for application category, can't remove application category..." -f Red
        wR`it`e-hOst "Please specify id for application category..." -f Red
        break

        }

        else {

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)/$id"
        In`V`OKE`-reS`TMEtH`od -Uri $uri -Headers $authToken -Method Delete

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = NEw-ob`j`Ect System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    WR`I`Te-ho`ST "Response content:`n$responseBody" -f Red
    WRIt`e-eR`RoR "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    WRIt`E-HO`ST
    break

    }

}





wrItE-`h`Ost


if($global:authToken){


    $DateTime = (Ge`T`-DatE).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        W`RIte`-hO`ST "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        W`RIt`e-`hOSt



            if($User -eq $null -or $User -eq ""){

            $User = re`AD`-hO`st -Prompt "Please specify your user principal name for Azure Authentication"
            WR`I`Te-h`OsT

            }

        $global:authToken = gET-A`U`T`HTokEN -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = REad`-Ho`ST -Prompt "Please specify your user principal name for Azure Authentication"
    write`-h`oST

    }


$global:authToken = Get-AuthT`o`keN -User $User

}





$App = GE`T`-APPl`i`CATionca`TeGo`RY -Name "LOB Apps 2" | W`HE`Re-oBjeCt { $_.lastModifiedDateTime -ne "0001-01-01T00:00:00Z" }

    if($App){

        if(@($App).count -gt 1){

        wRiTE`-HO`St "More than one Application Categrory has been found, please specify a single Application Category..." -ForegroundColor Red
        w`RIt`E-hOsT

        }

        elseif(@($App).count -eq 1){

        wriT`E-`HOST "Removing Application Category" $App.displayName -ForegroundColor Yellow
        remoVe-ap`pL`I`C`ATi`onCA`TEgOry -id $App.id

        }

    }

    else {

    Wr`IT`e-hOST "Application Category can't be found or its an inbuilt category name that can't be removed..." -ForegroundColor Yellow
    WrI`T`E`-hOsT

    }