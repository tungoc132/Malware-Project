Process Argument Tree of ObfuscatedCommand with current launcher:
pOwErSHElL  "




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User

)

$userUpn = New-Object \"System.Net.Mail.MailAddress\" -ArgumentList $User

$tenant = $userUpn.Host

Write-Host \"Checking for AzureAD module...\"

    $AadModule = Get-Module -Name \"AzureAD\" -ListAvailable

    if ($AadModule -eq $null) {

        Write-Host \"AzureAD PowerShell module not found, looking for AzureADPreview\"
        $AadModule = Get-Module -Name \"AzureADPreview\" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host \"AzureAD Powershell module not installed...\" -f Red
        write-host \"Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt\" -f Yellow
        write-host \"Script can't continue...\" -f Red
        write-host
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }

        $adal = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"
        $adalforms = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll\"

    }

    else {

        $adal = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"
        $adalforms = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll\"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null

[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null
 


$clientId = \"d1ddf0e4-d672-4dae-b554-9d5bdfd93547\<REDACTED: ArgumentLength = 93017>kDomainNames": [],
  "enterpriseProxiedDomains": [
    {
      "displayName": "SharePoint",
      "proxiedDomains": [
        {
          "ipAddressOrFQDN": "$Sharepoint.sharepoint.com",
          "@odata.type": "
        },
        {
          "ipAddressOrFQDN": "$Sharepoint-my.sharepoint.com",
          "@odata.type": "
        },
        {
          "ipAddressOrFQDN": "$Sharepoint.sharepoint.com",
          "@odata.type": "
        }
      ],
      "@odata.type": "
    }
  ],
  "enterpriseIPRanges": [],
  "enterpriseIPRangesAreAuthoritative": false,
  "enterpriseProxyServers": [],
  "enterpriseInternalProxyServers": [],
  "enterpriseProxyServersAreAuthoritative": false,
  "neutralDomainResources": [],
  "@odata.type": "
}

"\"



Write-Host \"Adding Windows Information Protection Without Enrollment Policy from JSON...\" -ForegroundColor Yellow

$CreateResult = Add-WindowsInformationProtectionPolicy -JSON $ManagedAppPolicy_WIP

write-host \"Policy created with id\" $CreateResult.id

$WIP_PolicyID = $CreateResult.id

$Assign_Policy = Assign-WindowsInformationProtectionPolicy -Id $WIP_PolicyID -TargetGroupId $TargetGroupId
Write-Host \"Assigned '$AADGroup' to $($CreateResult.displayName)/$($CreateResult.id)\"

Write-Host

Write-Host \"Adding Windows Information Protection MDM Policy from JSON...\" -ForegroundColor Yellow

$CreateResult = Add-MDMWindowsInformationProtectionPolicy -JSON $ManagedAppPolicy_WIP_MDM

write-host \"Policy created with id\" $CreateResult.id

$WIP_PolicyID = $CreateResult.id

$Assign_Policy = Assign-MDMWindowsInformationProtectionPolicy -Id $WIP_PolicyID -TargetGroupId $TargetGroupId
Write-Host \"Assigned '$AADGroup' to $($CreateResult.displayName)/$($CreateResult.id)\"

Write-Host"

WARNING: This command exceeds the cmd.exe maximum allowed length of 8190 characters! Its length is 93017 characters.

Executed:
  CLI:  Launcher\PS\0
  FULL: Out-PowerShellLauncher -ScriptBlock $ScriptBlock 1

Result:
pOwErSHElL  "




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User

)

$userUpn = New-Object \"System.Net.Mail.MailAddress\" -ArgumentList $User

$tenant = $userUpn.Host

Write-Host \"Checking for AzureAD module...\"

    $AadModule = Get-Module -Name \"AzureAD\" -ListAvailable

    if ($AadModule -eq $null) {

        Write-Host \"AzureAD PowerShell module not found, looking for AzureADPreview\"
        $AadModule = Get-Module -Name \"AzureADPreview\" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host \"AzureAD Powershell module not installed...\" -f Red
        write-host \"Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt\" -f Yellow
        write-host \"Script can't continue...\" -f Red
        write-host
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }

        $adal = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"
        $adalforms = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll\"

    }

    else {

        $adal = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"
        $adalforms = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll\"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null

[System.Reflection.Assembly]::LoadFrom($adalforms) | Out-Null
 


$clientId = \"d1ddf0e4-d672<REDACTED: ObfuscatedLength = 93017> [],
  "enterpriseProxiedDomains": [
    {
      "displayName": "SharePoint",
      "proxiedDomains": [
        {
          "ipAddressOrFQDN": "$Sharepoint.sharepoint.com",
          "@odata.type": "
        },
        {
          "ipAddressOrFQDN": "$Sharepoint-my.sharepoint.com",
          "@odata.type": "
        },
        {
          "ipAddressOrFQDN": "$Sharepoint.sharepoint.com",
          "@odata.type": "
        }
      ],
      "@odata.type": "
    }
  ],
  "enterpriseIPRanges": [],
  "enterpriseIPRangesAreAuthoritative": false,
  "enterpriseProxyServers": [],
  "enterpriseInternalProxyServers": [],
  "enterpriseProxyServersAreAuthoritative": false,
  "neutralDomainResources": [],
  "@odata.type": "
}

"\"



Write-Host \"Adding Windows Information Protection Without Enrollment Policy from JSON...\" -ForegroundColor Yellow

$CreateResult = Add-WindowsInformationProtectionPolicy -JSON $ManagedAppPolicy_WIP

write-host \"Policy created with id\" $CreateResult.id

$WIP_PolicyID = $CreateResult.id

$Assign_Policy = Assign-WindowsInformationProtectionPolicy -Id $WIP_PolicyID -TargetGroupId $TargetGroupId
Write-Host \"Assigned '$AADGroup' to $($CreateResult.displayName)/$($CreateResult.id)\"

Write-Host

Write-Host \"Adding Windows Information Protection MDM Policy from JSON...\" -ForegroundColor Yellow

$CreateResult = Add-MDMWindowsInformationProtectionPolicy -JSON $ManagedAppPolicy_WIP_MDM

write-host \"Policy created with id\" $CreateResult.id

$WIP_PolicyID = $CreateResult.id

$Assign_Policy = Assign-MDMWindowsInformationProtectionPolicy -Id $WIP_PolicyID -TargetGroupId $TargetGroupId
Write-Host \"Assigned '$AADGroup' to $($CreateResult.displayName)/$($CreateResult.id)\"

Write-Host"

# WARNING: This command exceeds the cmd.exe maximum length of 8190.  Its length is 93017 characters.