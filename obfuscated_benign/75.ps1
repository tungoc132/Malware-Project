# [*] Obfuscating 55 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('New-'+'O'+'b'+'ject') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

.('W'+'rite-Hos'+'t') "Checking for AzureAD module..."

    $AadModule = .('G'+'et-'+'Modu'+'le') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        .('Wri'+'te-H'+'ost') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &('Get-'+'M'+'odule') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        .('wr'+'it'+'e-host')
        &('wri'+'te'+'-ho'+'st') "AzureAD Powershell module not installed..." -f Red
        .('wri'+'te-hos'+'t') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        .('write'+'-'+'ho'+'st') "Script can't continue..." -f Red
        &('write-ho'+'s'+'t')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &('s'+'ele'+'ct') version | .('Sor'+'t-Ob'+'ject'))[-1]

        $aadModule = $AadModule | .('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &('sel'+'ec'+'t') -Unique

            }

        $adal = .('Joi'+'n-Pat'+'h') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &('Jo'+'in'+'-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = &('Jo'+'in-P'+'ath') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Jo'+'i'+'n-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | .('Out-'+'Nul'+'l')

[System.Reflection.Assembly]::LoadFrom($adalforms) | .('O'+'ut-Nu'+'ll')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = .('N'+'ew'+'-Obj'+'ect') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = &('New'+'-Ob'+'je'+'ct') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = .('New-O'+'bj'+'ect') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &('W'+'rite-'+'Host')
        &('Wri'+'te'+'-Host') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        .('Wr'+'i'+'te'+'-Host')
        break

        }

    }

    catch {

    &('wri'+'te-'+'h'+'ost') $_.Exception.Message -f Red
    &('wri'+'te'+'-host') $_.Exception.ItemName -f Red
    .('wr'+'i'+'te-host')
    break

    }

}



Function Get-IntuneBrand(){



[cmdletbinding()]

$graphApiVersion = "Beta"
$Resource = "deviceManagement/intuneBrandingProfiles"

    try {

    $uri = "https://graph.microsoft.com/$graphApiVersion/$($resource)"
    (.('Invoke-R'+'est'+'M'+'ethod') -Uri $uri -Headers $authToken -Method Get).value

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = .('New'+'-Objec'+'t') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    .('Wri'+'te-Ho'+'s'+'t') "Response content:`n$responseBody" -f Red
    &('Wr'+'ite-E'+'rror') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    .('w'+'ri'+'te-host')
    break

    }

}



Function Set-IntuneBrand(){



[cmdletbinding()]

param
(
    $id,
    $JSON
)

$graphApiVersion = "Beta"
$Resource = "deviceManagement/intuneBrandingProfiles('$id')"

    try {

        if(!$JSON){

        &('wr'+'ite-'+'host') "No JSON was passed to the function, provide a JSON variable" -f Red
        break

        }

        else {

        &('Test-'+'JSON') -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
        .('Inv'+'oke'+'-Re'+'stMe'+'thod') -Uri $uri -Method Patch -ContentType "application/json" -Body $JSON -Headers $authToken

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = &('N'+'e'+'w-Ob'+'ject') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    &('Write'+'-'+'Ho'+'st') "Response content:`n$responseBody" -f Red
    .('Wr'+'ite-E'+'rr'+'or') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    &('wr'+'ite-hos'+'t')
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = .('Co'+'nv'+'ertFro'+'m-Jso'+'n') $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    .('W'+'ri'+'te-Host') "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}





&('wr'+'i'+'t'+'e-host')


if($global:authToken){


    $DateTime = (&('Ge'+'t-Da'+'te')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        &('write'+'-hos'+'t') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        &('w'+'ri'+'te-host')



            if($User -eq $null -or $User -eq ""){

            $User = .('Read-Ho'+'s'+'t') -Prompt "Please specify your user principal name for Azure Authentication"
            &('W'+'ri'+'te-Host')

            }

        $global:authToken = .('Get-Aut'+'hTok'+'en') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = .('Read-H'+'ost') -Prompt "Please specify your user principal name for Azure Authentication"
    &('W'+'ri'+'te-Host')

    }


$global:authToken = &('Get-Au'+'t'+'hToken') -User $User

}





$JSON_Default = @"

{

    "displayName": "",
    "privacyUrl": "",
    "contactITName":"",
    "contactITPhoneNumber":"",
    "contactITEmailAddress":"",
    "contactITNotes":"",
    "onlineSupportSiteUrl":"",
    "onlineSupportSiteName":"",
    "themeColor":{"r":0,"g":114,"b":198},
    "showLogo":false,
    "showDisplayNameNextToLogo":true

}

"@



$IntuneBrand = .('G'+'et-I'+'ntun'+'eBr'+'and')

$id = $IntuneBrand.id

&('S'+'e'+'t-Intune'+'Brand') -id $id -JSON $JSON_Default