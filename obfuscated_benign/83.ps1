# [*] Obfuscating 72 Command tokens.



function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = &("{1}{2}{0}"-f 't','Ne','w-Objec') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&("{1}{2}{0}" -f'-Host','Wri','te') "Checking for AzureAD module..."

    $AadModule = &("{2}{1}{0}" -f'e','-Modul','Get') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &("{1}{3}{2}{0}"-f 'ost','Write','H','-') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &("{2}{0}{1}"-f'Mod','ule','Get-') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &("{1}{0}{2}"-f 'e-ho','writ','st')
        &("{2}{0}{1}" -f 'e-hos','t','writ') "AzureAD Powershell module not installed..." -f Red
        &("{1}{0}{2}" -f'ite-h','wr','ost') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &("{3}{1}{2}{0}" -f 'st','e-','ho','writ') "Script can't continue..." -f Red
        &("{0}{1}{2}" -f'write','-','host')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &("{1}{0}" -f'lect','se') version | &("{2}{1}{0}" -f 'bject','-O','Sort'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &("{1}{2}{0}" -f 't','s','elec') -Unique

            }

        $adal = &("{2}{1}{3}{0}"-f 'th','oin-P','J','a') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{1}{0}{2}" -f'a','Join-P','th') $AadModule.Mod<REDACTED: ObfuscatedLength = 10821> user principal name for Azure Authentication"
    &("{1}{2}{3}{0}" -f 'Host','Wri','t','e-')

    }


$global:authToken = .("{1}{0}{2}" -f'-Auth','Get','Token') -User $User

}





$DeviceName = "Intune Device Name"

$IntuneDevice = .("{2}{4}{1}{3}{0}" -f'dDevices','a','Get','nage','-M') -DeviceName "$DeviceName"

if($IntuneDevice){

    if(@($IntuneDevice).count -eq 1){

    .("{1}{3}{2}{0}"-f 'te-host','w','i','r') "Are you sure you want to remove all scope tags from '$DeviceName' (Y or N?)" -ForegroundColor Yellow
    $Confirm = &("{0}{1}" -f 'read-h','ost')

        if($Confirm -eq "y" -or $Confirm -eq "Y"){

        $DeviceID = $IntuneDevice.id
        $DeviceName = $IntuneDevice.deviceName

        &("{1}{2}{0}"-f 'st','wri','te-ho') "Managed Device" $IntuneDevice.deviceName "found..." -ForegroundColor Yellow

        $Result = &("{2}{1}{4}{0}{3}{5}{6}" -f'edD','-Man','Update','evi','ag','c','es') -id $DeviceID -ScopeTags ""

            if($Result -eq ""){

                &("{1}{2}{0}" -f 'Host','Writ','e-') "Managed Device '$DeviceName' patched with No Scope Tag assigned..." -ForegroundColor Gray

            }

        }

        else {

            .("{2}{0}{1}{3}"-f 'it','e-Hos','Wr','t') "Removal of all Scope Tags for '$DeviceName' was cancelled..."

        }

        .("{1}{2}{0}{3}"-f'e','Wr','it','-Host')

    }

    elseif(@($IntuneManagedDevice).count -gt 1){

        .("{1}{0}{2}" -f '-H','Write','ost') "More than one device found with name '$deviceName'..." -ForegroundColor Red

    }

}

else {

.("{0}{3}{2}{1}" -f'Wr','t','s','ite-Ho') "No Intune Managed Device found with name '$deviceName'..." -ForegroundColor Red
&("{1}{2}{0}"-f '-Host','Wr','ite')

}

# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 10821 characters.