# [*] Obfuscating 65 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = n`EW`-ObJ`eCt "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

W`RIt`e-H`osT "Checking for AzureAD module..."

    $AadModule = g`ET-MODu`le -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        Writ`E-HO`st "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = GE`T-`mODu`LE -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        W`RItE-`hO`St
        WriT`E`-HoST "AzureAD Powershell module not installed..." -f Red
        w`Ri`T`E-hoST "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        writ`E-`HOsT "Script can't continue..." -f Red
        wRit`E`-hOst
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | s`eLECT version | SOR`T-ob`jecT)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | s`El`ECT -Unique

            }

        $adal = jOI`N-pa`Th $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = J`o`IN-path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = joIn-pa`TH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = joI`N-`PAtH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | out`-`NUll

[System.Reflection.Assembly]::LoadFrom($adalforms) | OuT`-`NuLL

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = N`Ew-o`B`jECT "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = ne`W-`oBJE`Ct "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = nEW-OB`JE`Ct "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        Wr`It`e`-hosT
        WR`Ite-HO`ST "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        wRIte`-`hOST
        break

        }

    }

    catch {

    wR`itE`-hoSt $_.Exception.Message -f Red
    Wr`ITe-h`oST $_.Exception.ItemName -f Red
    wrIt`e-ho`sT
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = C`onVerTfRoM-`j`SoN $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    W`RitE`-hOSt "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}



Function Add-WebApplication(){



[cmdletbinding()]

param
(
    $JSON,
    $IconURL
)

$graphApiVersion = "Beta"
$App_resource = "deviceAppManagement/mobileApps"

    try {

        if(!$JSON){

        w`Ri`Te-hOsT "No JSON was passed to the function, provide a JSON variable" -f Red
        break

        }


        if($IconURL){

        w`RI`TE-VErbose "Icon specified: $IconURL"

            if(!(Te`St-PatH "$IconURL")){

            WR`I`TE-HoSt "Icon Path '$IconURL' doesn't exist..." -ForegroundColor Red
            W`R`IT`E-HOST "Please specify a valid path..." -ForegroundColor Red
            WrIT`e`-HOSt
            break

            }

        $iconResponse = IN`VoKe-wEBR`equ`eST "$iconUrl"
        $base64icon = [System.Convert]::ToBase64String($iconResponse.Content)
        $iconExt = ([System.IO.Path]::GetExtension("$iconURL")).replace(".","")
        $iconType = "image/$iconExt"

        WriTE-v`Er`BOsE "Updating JSON to add Icon Data"

        $U_JSON = cOnver`TfRO`m-J`son $JSON

        $U_JSON.largeIcon.type = "$iconType"
        $U_JSON.largeIcon.value = "$base64icon"

        $JSON = CoN`Ver`TTO-`jSON $U_JSON

        W`RIt`E-V`ERbOSe $JSON

        tEST-j`S`oN -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        iNVOkE-`ReSTMe`T`Hod -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken

        }

        else {

        TesT-`js`on -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        IN`VO`k`E-rESTMET`hOD -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = ne`W-oB`J`eCt System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    w`R`Ite-hosT "Response content:`n$responseBody" -f Red
    w`RITe-ErR`or "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    Write`-HO`St
    break

    }

}





wrI`TE-`hOST


if($global:authToken){


    $DateTime = (GE`T-`DATe).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        w`R`iTE-H`oST "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        wRI`T`e-HOsT



            if($User -eq $null -or $User -eq ""){

            $User = REad-h`o`St -Prompt "Please specify your user principal name for Azure Authentication"
            WRI`TE`-hOst

            }

        $global:authToken = geT`-AuTht`oKEN -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = re`A`D-ho`st -Prompt "Please specify your user principal name for Azure Authentication"
    W`RI`Te-H`OsT

    }


$global:authToken = ge`T`-AuThTo`KEn -User $User

}







$iconUrl_Bing = "C:\IntuneIcons\MyApps.PNG"



$Bing = @"

{
    "@odata.type":"
    "displayName":"Bing Web Search",
    "description":"Bing Web Search",
    "publisher":"Intune Admin",
    "isFeatured":false,
    "appUrl":"https://www.bing.com",
    "useManagedBrowser":false,
    largeIcon: {
    "@odata.type": "
    "type": "$iconType",
    "value": "$base64icon"
    }
}

"@



WrIT`e-h`oSt "Publishing" ($Bing | COn`V`Er`TFro`m-JsOn).displayName -ForegroundColor Yellow

$Create_Bing = aD`d-w`ebap`plIcaT`ioN -JSON $Bing -IconURL "$iconUrl_Bing"

wR`ITe-`ho`ST "Application created as $($Create_Bing.displayName)/$($create_Bing.id)"
w`RitE-Ho`ST