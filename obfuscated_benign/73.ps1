# [*] Obfuscating 50 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('Ne'+'w-Ob'+'ject') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&('W'+'rite-Ho'+'s'+'t') "Checking for AzureAD module..."

    $AadModule = .('Get-'+'Modul'+'e') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        .('Wri'+'te'+'-'+'Host') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = .('G'+'et-'+'Module') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        .('write-'+'h'+'ost')
        &('write-'+'h'+'ost') "AzureAD Powershell module not installed..." -f Red
        &('wr'+'ite'+'-hos'+'t') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &('write-h'+'os'+'t') "Script can't continue..." -f Red
        &('w'+'ri'+'te-host')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &('sele'+'ct') version | .('Sor'+'t-O'+'bje'+'ct'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &('sel'+'ect') -Unique

            }

        $adal = .('Join-P'+'a'+'th') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Jo'+'in'+'-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = .('Join'+'-'+'Pa'+'th') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &('Joi'+'n-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | .('O'+'u'+'t-Null')

[System.Reflection.Assembly]::LoadFrom($adalforms) | &('Out-'+'N'+'ull')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = &('New-Obj'+'ec'+'t') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = &('New'+'-'+'Obje'+'ct') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = .('N'+'ew'+'-Object') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &('Wr'+'i'+'te-H'+'ost')
        &('Wri'+'te-'+'Host') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        .('Write'+'-H'+'ost')
        break

        }

    }

    catch {

    .('w'+'ri'+'te-host') $_.Exception.Message -f Red
    &('w'+'rite-hos'+'t') $_.Exception.ItemName -f Red
    .('w'+'rite-hos'+'t')
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = .('Con'+'vert'+'From-J'+'so'+'n') $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    &('Write'+'-'+'Host') "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}



Function Add-ApplicationCategory(){



[cmdletbinding()]

param
(
    $AppCategoryName
)

$graphApiVersion = "Beta"
$Resource = "deviceAppManagement/mobileAppCategories"

    try {

        if(!$AppCategoryName){

        &('w'+'rite-hos'+'t') "No Application Category Name specified, specify a valid Application Category Name" -f Red
        break

        }

$JSON = @"

{
  "@odata.type": "
  "displayName": "$AppCategoryName"
}

"@

    $uri = "https://graph.microsoft.com/$graphApiVersion/$($Resource)"
    .('In'+'v'+'oke-R'+'estMetho'+'d') -Uri $uri -Headers $authToken -Method Post -Body $JSON -ContentType "application/json"

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = &('New'+'-O'+'b'+'ject') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    .('Writ'+'e-Hos'+'t') "Response content:`n$responseBody" -f Red
    &('W'+'rite-E'+'rro'+'r') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    .('w'+'rite-hos'+'t')
    break

    }

}





.('w'+'rite-ho'+'st')


if($global:authToken){


    $DateTime = (&('G'+'et-'+'Date')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        &('w'+'r'+'ite-ho'+'st') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        &('wri'+'t'+'e'+'-host')



            if($User -eq $null -or $User -eq ""){

            $User = .('Rea'+'d-Ho'+'st') -Prompt "Please specify your user principal name for Azure Authentication"
            &('Write-H'+'o'+'st')

            }

        $global:authToken = &('G'+'e'+'t-Au'+'thToken') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = .('Read-H'+'os'+'t') -Prompt "Please specify your user principal name for Azure Authentication"
    &('Wri'+'te-'+'Host')

    }


$global:authToken = &('G'+'et-'+'AuthToken') -User $User

}





$Category = .('Add-'+'A'+'ppl'+'ication'+'Category') -AppCategoryName "LOB Apps 2"

&('Wr'+'ite'+'-Host') "Application category added" $Category.displayname "with ID" $Category.id -ForegroundColor Green
&('Wri'+'t'+'e-Host')