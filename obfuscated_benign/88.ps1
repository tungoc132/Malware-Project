# [*] Obfuscating 87 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = &("{0}{2}{1}"-f'New-','bject','O') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&("{0}{2}{1}{3}"-f'Wri','-Ho','te','st') "Checking for AzureAD module..."

    $AadModule = &("{1}{2}{0}"-f 'odule','Ge','t-M') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &("{1}{0}{2}"-f '-H','Write','ost') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &("{2}{1}{0}" -f 'odule','et-M','G') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &("{0}{1}{2}"-f 'write-','hos','t')
        &("{0}{1}{2}"-f'w','rite','-host') "AzureAD Powershell module not installed..." -f Red
        &("{2}{0}{1}" -f 'o','st','write-h') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &("{0}{2}{1}"-f 'w','-host','rite') "Script can't continue..." -f Red
        &("{2}{0}{1}"-f'e-','host','writ')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &("{1}{0}" -f 't','selec') version | &("{0}{2}{1}{3}" -f 'Sor','b','t-O','ject'))[-1]

        $aadModule = $AadModule | &('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &("{1}{0}"-f 't','selec') -Unique

            }

        $adal = &("{1}{0}{2}"-f'n-P','Joi','ath') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{0}{1}" -f'Joi','n-Path') $AadModule.ModuleBase "Microsoft.Id<REDACTED: ObfuscatedLength = 13443>exist, please specify a valid AAD Group..." -ForegroundColor Red
    &("{1}{2}{0}" -f'ost','Write','-H')
    exit

    }

&("{0}{1}{2}" -f'Wr','ite-Hos','t')



$JSON = @"

{
  "@odata.type": "
  "displayName": "Graph RBAC Role Assigned",
  "description": "New RBAC Role Description",
  "permissions": [
    {
      "actions": [
        "Microsoft.Intune/MobileApps/Read",
        "Microsoft.Intune/TermsAndConditions/Read",
        "Microsoft.Intune/ManagedApps/Read",
        "Microsoft.Intune/ManagedDevices/Read",
        "Microsoft.Intune/DeviceConfigurations/Read",
        "Microsoft.Intune/TelecomExpenses/Read",
        "Microsoft.Intune/Organization/Read",
        "Microsoft.Intune/RemoteTasks/RebootNow",
        "Microsoft.Intune/RemoteTasks/RemoteLock"
      ]
    }
  ],
  "isBuiltInRoleDefinition": false
}

"@



&("{1}{2}{0}"-f't','Write','-Hos') "Adding Intune Role from JSON..." -ForegroundColor Yellow
&("{0}{1}{2}"-f'W','rite','-Host') "Creating Intune Role via Graph"
$CreateResult = &("{0}{3}{1}{2}" -f'Add-RBAC','o','le','R') -JSON $JSON
&("{1}{2}{3}{0}" -f 't','wri','t','e-hos') "Intune Role created with id" $CreateResult.id

$IntuneRoleID = $CreateResult.id

&("{1}{2}{0}"-f 'ost','Write-','H')

&("{0}{3}{1}{2}" -f 'W','e-H','ost','rit') "Creating Intune Role Assignment..." -ForegroundColor Yellow
&("{2}{0}{1}" -f'ite-Ho','st','Wr') "Creating Intune Role Assignment via Graph"

$AssignmentIntuneRole = &("{3}{0}{2}{1}"-f'ss','ACRole','ign-RB','A') -Id $IntuneRoleID -DisplayName "Assignment" -MemberGroupId $MemberGroupId -TargetGroupId $TargetGroupId
&("{1}{0}{2}"-f'r','w','ite-host') "Intune Role Assigment created with id" $AssignmentIntuneRole.id

&("{1}{2}{0}"-f 'Host','Write','-')


# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 13477 characters.