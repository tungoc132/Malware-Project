# [*] Obfuscating 53 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = neW-o`BJ`e`cT "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

Wr`IT`e`-hOSt "Checking for AzureAD module..."

    $AadModule = Get-mO`D`ULE -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        wr`i`Te-hOsT "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = GE`T-modu`LE -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        wrIt`E-HO`sT
        w`RITE-h`o`St "AzureAD Powershell module not installed..." -f Red
        wR`ite-`HosT "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        WRitE-`ho`ST "Script can't continue..." -f Red
        w`RIte-h`oSt
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | se`l`eCT version | So`Rt-ob`ject)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | sE`lECT -Unique

            }

        $adal = J`Oin-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = JOI`N-`Pa`TH $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = joi`N-Pa`Th $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = jOIn-`Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | O`Ut-`NUll

[System.Reflection.Assembly]::LoadFrom($adalforms) | oUt`-n`ULL

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = N`e`w-OBjECT "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = N`EW-o`BJECt "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = NEW-obj`E`ct "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        wr`ITe-ho`st
        WRIT`e-H`Ost "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        w`RitE`-h`OSt
        break

        }

    }

    catch {

    WrIte`-ho`St $_.Exception.Message -f Red
    w`RIT`e-HOST $_.Exception.ItemName -f Red
    WrI`Te-`hosT
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = COnV`ERtfr`o`M`-JSON $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    w`Ri`TE-hoSt "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}



Function Add-WebApplication(){



[cmdletbinding()]

param
(
    $JSON,
    $IconURL
)

$graphApiVersion = "Beta"
$App_resource = "deviceAppManagement/mobileApps"

    try {

        if(!$JSON){

        wR`iTe`-hOsT "No JSON was passed to the function, provide a JSON variable" -f Red
        break

        }


        if($IconURL){

        wRi`Te-Ve`RbosE "Icon specified: $IconURL"

            if(!(Tes`T-P`ATH "$IconURL")){

            wr`i`TE-HoST "Icon Path '$IconURL' doesn't exist..." -ForegroundColor Red
            wr`It`e-H`oSt "Please specify a valid path..." -ForegroundColor Red
            WR`iT`E-h`oSt
            break

            }

        $iconResponse = inVoke`-`WEbRe`Q`UEst "$iconUrl"
        $base64icon = [System.Convert]::ToBase64String($iconResponse.Content)
        $iconExt = ([System.IO.Path]::GetExtension("$iconURL")).replace(".","")
        $iconType = "image/$iconExt"

        W`RITe-Ve`R`B`ose "Updating JSON to add Icon Data"

        $U_JSON = conVErTFrO`M`-`jsoN $JSON

        $U_JSON.largeIcon.type = "$iconType"
        $U_JSON.largeIcon.value = "$base64icon"

        $JSON = cON`V`eRTto-`j`son $U_JSON

        wRI`Te-V`eR`B`oSe $JSON

        t`es`T-jSON -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        I`NvO`kE-REsTm`eTHoD -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken

        }

        else {

        T`es`T-JS`On -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        I`NvoKE-r`E`StmEthOd -Uri $uri -Method Post -ContentType "application/json" -Body $JSON -Headers $authToken

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = Ne`w-O`Bje`ct System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    wR`IT`E-h`osT "Response content:`n$responseBody" -f Red
    Wr`ITe-eR`R`or "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    WrI`Te-HO`st
    break

    }

}





wRIt`E-h`ost


if($global:authToken){


    $DateTime = (g`Et-`DAtE).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        w`R`itE-H`OSt "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        w`Ri`T`e-hOSt



            if($User -eq $null -or $User -eq ""){

            $User = R`eaD-`HoSt -Prompt "Please specify your user principal name for Azure Authentication"
            wRite-H`o`St

            }

        $global:authToken = G`E`T-Au`ThtokEn -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = ReAD-`H`OST -Prompt "Please specify your user principal name for Azure Authentication"
    wr`iTe-HO`sT

    }


$global:authToken = g`ET-AuT`hTOkeN -User $User

}







$iconUrl_Bing = "C:\IntuneIcons\MyApps.PNG"



$Bing = @"

{
    "@odata.type":"
    "displayName":"Bing Web Search",
    "description":"Bing Web Search",
    "publisher":"Intune Admin",
    "isFeatured":false,
    "appUrl":"https://www.bing.com",
    "useManagedBrowser":false,
    largeIcon: {
    "@odata.type": "
    "type": "$iconType",
    "value": "$base64icon"
    }
}

"@



wRiT`E-H`ost "Publishing" ($Bing | convERt`F`RO`M-js`oN).displayName -ForegroundColor Yellow

$Create_Bing = a`dd-We`Ba`pPLIcatiOn -JSON $Bing -IconURL "$iconUrl_Bing"

w`RIt`E-Ho`st "Application created as $($Create_Bing.displayName)/$($create_Bing.id)"
W`RiT`E-`Host

# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 8806 characters.
