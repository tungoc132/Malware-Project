# [*] Obfuscating 80 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = &("{0}{1}{3}{2}" -f'New-','O','ct','bje') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&("{2}{0}{1}" -f'te','-Host','Wri') "Checking for AzureAD module..."

    $AadModule = &("{2}{0}{1}"-f 't-','Module','Ge') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &("{1}{3}{0}{2}" -f 'te-Hos','W','t','ri') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &("{3}{2}{1}{0}"-f'odule','M','et-','G') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &("{1}{2}{0}" -f'ost','write','-h')
        &("{0}{2}{1}"-f 'writ','host','e-') "AzureAD Powershell module not installed..." -f Red
        &("{0}{1}{2}" -f 'wri','te-','host') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &("{1}{0}{2}" -f 'te-','wri','host') "Script can't continue..." -f Red
        &("{1}{2}{0}{3}"-f '-','writ','e','host')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | .("{1}{0}{2}"-f'elec','s','t') version | .("{1}{0}{2}"-f '-Obje','Sort','ct'))[-1]

        $aadModule = $AadModule | .('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &("{1}{0}" -f 't','selec') -Unique

            }

        $adal = &("{0}{2}{1}" -f 'J','in-Path','o') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &("{0}{1}{2}" -f'J','oin-Pat','h') $AadMod<REDACTED: ObfuscatedLength = 10288>f 'e-host','t','w','ri') "Jail Broken:"$Device.jailBroken
            &("{1}{2}{0}" -f 'ost','w','rite-h') "Compliance State:"$Device.complianceState
            .("{0}{2}{1}{3}" -f 'w','te-ho','ri','st') "Enrollment Type:"$Device.enrollmentType
            .("{2}{0}{1}"-f 'rite','-host','w') "AAD Registered:"$Device.aadRegistered
            .("{2}{1}{0}" -f'e-host','it','wr') "Management Agent:"$Device.managementAgent
            &("{0}{2}{1}" -f 'Write-H','t','os') "User Principal Name:"$Device.userPrincipalName

            $LastSyncTime = [datetimeoffset]::Parse($LSD)

            $TimeDifference = $CurrentTime - $LastSyncTime

            .("{0}{1}{2}"-f'wri','te-','host')
            .("{1}{2}{0}" -f't','writ','e-hos') "Device last synced"$TimeDifference.days "days ago..." -ForegroundColor Red
            .("{3}{2}{1}{0}"-f'Host','e-','it','Wr')

            }

        }

        else {

        .("{0}{1}{3}{2}" -f 'w','rite-ho','t','s') "No Devices not checked in the last $days days found..." -f green
        &("{0}{2}{1}"-f 'Write','ost','-H')

        }

    }

    catch {

    &("{2}{3}{1}{0}" -f 'ost','ite-H','W','r')
    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = .("{0}{1}{2}"-f 'New-Ob','je','ct') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    &("{0}{2}{1}"-f'Wr','-Host','ite') "Response content:`n$responseBody" -f Red
    .("{1}{3}{0}{2}" -f'te-','Wr','Error','i') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    &("{1}{2}{0}{3}" -f'te-','Wr','i','Host')

    break

    }


# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 10288 characters.