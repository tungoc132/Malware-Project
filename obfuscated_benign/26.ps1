. $PSScriptRoot\Shared.ps1

function GetMacOSAdjustedTempPath($Path) {
    if (($PSVersionTable.PSVersion.Major -ge 6) -and $IsMacOS) {

        return "/private${Path}"
    }

    $Path
}

Describe ("{4}{2}{3}{5}{1}{0}" -f 'sts','Te','itD','ire','Get-G','tory ') {
    Context ("{1}{2}{0}{3}{4}"-f'orma','T','est n','l r','epository') {
        BeforeAll {
            [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(("{8}{6}{9}{1}{0}{4}{5}{2}{3}{7}" -f 's','edVar','sigm','en','MoreTh','anAs','eDecl','ts','PSUs','ar'), '')]
            $origPath = Get-Location
        }
        AfterAll {
            Set-Location $origPath
        }

        It ('Ret'+'ur'+'ns '+('iR0nu'+'ll ').rEPLacE(([CHar]105+[CHar]82+[CHar]48),'$')+'f'+'or '+'no'+'t '+'a '+'Gi'+'t '+'re'+'po') {
            Set-Location $env:windir
            Get-GitDirectory | Should BeNullOrEmpty
        }
        It ('Re'+'turns '+('{0}nu'+'l'+'l ')-F [chAr]36+'for'+' '+'no'+'t '+'a '+'filesy'+'st'+'e'+'m '+'pat'+'h') {
            Set-Location Alias:\
            Get-GitDirectory | Should BeNullOrEmpty
        }
        It ("{9}{0}{7}{5}{8}{2}{4}{10}{11}{3}{1}{6}"-f'tu',' ','h ','of','whe','rect p','repo','rns cor','at','Re','n in th','e root ') {
            $repoRoot = (Resolve-Path $PSScriptRoot\..).Path
            Set-Location $repoRoot
            Get-GitDirectory | Should BeExactly (MakeNativePath $repoRoot\.git)
        }
        It ("{10}{0}{7}{4}{11}{17}{6}{5}{16}{18}{15}{3}{14}{12}{8}{1}{9}{13}{2}" -f 't','oo',' repo','older of ','ns c','r','de','ur','e r','t ','Re','orrect ','h','of','t','ld f',' a','path when un',' chi') {
            $repoRoot = (Resolve-Path $PSScriptRoot\..).Path
            Set-Location $PSScriptRoot
            Get-GitDirectory | Should BeExactly (Join-Path $repoRoot .git)
        }
    }

    Context ("{1}{2}{3}{0}"-f'ktree','Te','st ','wor') {
        BeforeEach {
            [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(("{5}{0}{4}{8}{2}{3}{7}{1}{9}{6}" -f's','a','dVar','sM','eDecl','PSU','nts','oreTh','are','nAssigme'), '')]
            $origPath = Get-Location
            $temp = [System.IO.Path]::GetTempPath()
            $repoPath = Join-Path $temp ([IO.Path]::GetRandomFileName())
            $worktreePath = Join-Path $temp ([IO.Path]::GetRandomFileName())

            &$gitbin init $repoPath
            Set-Location $repoPath


            &$gitbin config user.email ("{0}{3}{1}{2}"-f 'you','le.c','om','@examp')
            &$gitbin config user.name ("{3}{1}{2}{0}" -f 'er','s','ter Us','Pe')

            'foo' > ./README.md
            &$gitbin add ./README.md

            &$gitbin commit -m ("`"initial "+"commit.`"")

            if (Test-Path $worktreePath) {
                Remove-Item $worktreePath -Recurse -Force
            }
            New-Item $worktreePath -ItemType Directory > $null
            &$gitbin worktree add -b test-worktree $worktreePath master 2>$null
        }
        AfterEach {
            Set-Location $origPath
            if (Test-Path $repoPath) {
                Remove-Item $repoPath -Recurse -Force
            }
            if (Test-Path $worktreePath) {
                Remove-Item $worktreePath -Recurse -Force
            }
        }

        It ("{6}{3}{1}{5}{7}{4}{2}{0}" -f'rktree',' dir ','der a wo','ns the correct','n','w','Retur','hen u') {
            Set-Location $worktreePath
            $worktreeBaseName = Split-Path $worktreePath -Leaf
            $path = GetMacOSAdjustedTempPath $repoPath
            Get-GitDirectory | Should BeExactly (MakeGitPath $path\.git\worktrees\$worktreeBaseName)
        }
    }

    Context ("{1}{4}{2}{3}{0}" -f 'tory','Te','ar','e reposi','st b') {
        BeforeAll {
            [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(("{0}{7}{8}{6}{9}{3}{1}{5}{4}{2}" -f 'PSUseDe','n','ts','a','n','Assigme','oreT','clar','edVarsM','h'), '')]
            $origPath = Get-Location
            $temp = [System.IO.Path]::GetTempPath()
            $bareRepoName = ("{0}{1}{2}"-f 't','est.gi','t')
            $bareRepoPath = Join-Path $temp $bareRepoName
            if (Test-Path $bareRepoPath) {
                Remove-Item $bareRepoPath -Recurse -Force
            }
            &$gitbin init --bare $bareRepoPath
        }
        AfterAll {
            Set-Location $origPath
            if (Test-Path $bareRepoPath) {
                Remove-Item $bareRepoPath -Recurse -Force
            }
        }

        It ("{6}{3}{10}{4}{7}{9}{2}{8}{5}{0}{11}{1}"-f ' ',' repo','r','u','s correct path when',' of','Ret',' in the','oot',' ','rn','bare') {
            Set-Location $bareRepoPath
            Get-GitDirectory | Should BeExactly (MakeNativePath $bareRepoPath)
        }
        It ("{2}{8}{0}{12}{6}{5}{14}{16}{3}{9}{15}{17}{7}{4}{10}{11}{13}{1}" -f 'a','are repo','Ret','d','he r','der','en un','t','urns correct p',' folder','oot o','f ','th wh','b',' a c',' of','hil',' ') {
            Set-Location $bareRepoPath\hooks -ErrorVariable Stop
            $path = GetMacOSAdjustedTempPath $bareRepoPath
            Get-GitDirectory | Should BeExactly (MakeNativePath $path)
        }
    }

    Context ("{2}{4}{6}{1}{0}{7}{5}{8}{3}{9}"-f'vironmen','R en','Te','b','st GIT_','va','DI','t ','ria','le') {
        AfterAll {
            Remove-Item Env:\GIT_DIR -ErrorAction SilentlyContinue
        }
        It ("{9}{4}{2}{7}{3}{8}{1}{6}{5}{0}" -f 'nv var',' ','u','s the ','t','e','GIT_DIR ','rn','value in','Re') {
            $env:GIT_DIR = MakeNativePath ("{2}{1}{3}{4}{0}" -f't','x','/','yzzy/posh-git/','.gi')
            Get-GitDirectory | Should BeExactly $env:GIT_DIR
        }
    }
}