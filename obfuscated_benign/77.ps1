# [*] Obfuscating 55 Command tokens.




function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('Ne'+'w-O'+'bject') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

&('Write-'+'H'+'ost') "Checking for AzureAD module..."

    $AadModule = &('Ge'+'t'+'-'+'Module') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        &('W'+'rit'+'e-Host') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &('Get-Mo'+'dul'+'e') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        .('write'+'-'+'ho'+'st')
        .('wr'+'ite-ho'+'st') "AzureAD Powershell module not installed..." -f Red
        &('w'+'ri'+'te-h'+'ost') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        &('wr'+'ite'+'-host') "Script can't continue..." -f Red
        .('write'+'-'+'host')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &('s'+'elect') version | .('S'+'ort-Obje'+'ct'))[-1]

        $aadModule = $AadModule | .('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | &('s'+'elect') -Unique

            }

        $adal = .('J'+'oi'+'n'+'-Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Jo'+'i'+'n-'+'Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = &('Jo'+'i'+'n-P'+'ath') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = &('Join'+'-Pat'+'h') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | &('Out'+'-Nu'+'ll')

[System.Reflection.Assembly]::LoadFrom($adalforms) | &('Ou'+'t-Nu'+'ll')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = &('New'+'-Obj'+'ect') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = &('New'+'-O'+'bject') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = &('New'+'-O'+'bjec'+'t') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &('Write-Ho'+'s'+'t')
        &('Writ'+'e-'+'Host') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        .('Wr'+'ite-Hos'+'t')
        break

        }

    }

    catch {

    .('wri'+'te-'+'host') $_.Exception.Message -f Red
    .('write'+'-hos'+'t') $_.Exception.ItemName -f Red
    &('w'+'rite-ho'+'st')
    break

    }

}



Function Set-IntuneBrand(){



[cmdletbinding()]

param
(
    $JSON
)

$graphApiVersion = "Beta"
$App_resource = "deviceManagement"

    try {

        if(!$JSON){

        &('wri'+'t'+'e-host') "No JSON was passed to the function, provide a JSON variable" -f Red
        break

        }

        else {

        &('Test-'+'JSON') -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        .('Inv'+'ok'+'e-Rest'+'Method') -Uri $uri -Method Patch -ContentType "application/json" -Body $JSON -Headers $authToken

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = &('New-Ob'+'jec'+'t') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    &('Wr'+'it'+'e-Hos'+'t') "Response content:`n$responseBody" -f Red
    .('W'+'rite'+'-Er'+'ror') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    .('wr'+'ite-hos'+'t')
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = .('C'+'o'+'nvertF'+'rom-Json') $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    &('Wri'+'te'+'-Host') "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}





&('wri'+'te-h'+'ost')


if($global:authToken){


    $DateTime = (.('Get'+'-Dat'+'e')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        &('wri'+'te'+'-host') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        .('writ'+'e'+'-hos'+'t')



            if($User -eq $null -or $User -eq ""){

            $User = &('Read-H'+'os'+'t') -Prompt "Please specify your user principal name for Azure Authentication"
            &('Wri'+'te-H'+'ost')

            }

        $global:authToken = &('G'+'et'+'-Aut'+'hToken') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = &('Read-Ho'+'s'+'t') -Prompt "Please specify your user principal name for Azure Authentication"
    .('Write-Ho'+'s'+'t')

    }


$global:authToken = .('Get-Au'+'th'+'To'+'ken') -User $User

}





$iconUrl = "C:\Logos\Logo.png"

if(!(.('Te'+'st-Pat'+'h') "$iconUrl")){

&('Write-H'+'os'+'t')
.('wri'+'te-'+'host') "Icon Path '$iconUrl' doesn't exist..." -ForegroundColor Red
&('wri'+'te-ho'+'st') "Please specify a valid path to an icon..." -ForegroundColor Red
&('W'+'rit'+'e-Ho'+'st')
break

}

$iconResponse = &('I'+'nvok'+'e'+'-'+'We'+'bRequest') "$iconUrl"
$base64icon = [System.Convert]::ToBase64String($iconResponse.Content)
$iconExt = ([System.IO.Path]::GetExtension("$iconURL")).replace(".","")
$iconType = "image/$iconExt"



$JSON_Logo = @"
{
    "intuneBrand":{
    "displayName": "IT Company",
    "contactITName": "IT Admin",
    "contactITPhoneNumber": "01234567890",
    "contactITEmailAddress": "admin@itcompany.com",
    "contactITNotes": "some notes go here",
    "privacyUrl": "http://itcompany.com",
    "onlineSupportSiteUrl": "http://www.itcompany.com",
    "onlineSupportSiteName": "IT Company Website",
    "themeColor": {"r":0,"g":114,"b":198},
    "showLogo": true,
    lightBackgroundLogo: {
        "type": "$iconType`;base",
        "value": "$base64icon"
          },
    darkBackgroundLogo: {
        "type": "$iconType`;base",
        "value": "$base64icon"
          },
    "showNameNextToLogo": false,
    "@odata.type":"
    }
}
"@



.('Set-In'+'tun'+'eB'+'rand') -JSON $JSON_Logo