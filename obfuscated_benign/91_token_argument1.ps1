# [*] Obfuscating 39 Argument tokens.



function get-AUThTOkeN {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

Write-Host "Checking for AzureAD module..."

    $AadModule = Get-Module -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = Get-Module -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        write-host
        write-host "AzureAD Powershell module not installed..." -f ReD
        write-host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f YElLOW
        write-host "Script can't continue..." -f rED
        write-host
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | select versioN | Sort-Object)[-1]

        $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | select -Unique

            }

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = Join-Path $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | Out-Null

[System.Reflection.A<REDACTED: ObfuscatedLength = 11756>ame"

$IntuneDevice = Get-ManagedDevices -DeviceName "$DeviceName"

if($IntuneDevice){

    if(@($IntuneDevice).count -eq 1){

    $MD = Get-ManagedDevices -id $IntuneDevice.id

    write-host "Are you sure you want to add scope tag '$selection' to '$DeviceName' (Y or N?)" -ForegroundColor yelLow
    $Confirm = read-host

        if($Confirm -eq "y" -or $Confirm -eq "Y"){

        if($MD.roleScopeTagIds){

            if(!($MD.roleScopeTagIds).contains("$ScopeTagId")){

                $ST = @($MD.roleScopeTagIds) + @("$ScopeTagId")

                $Result = Update-ManagedDevices -id $MD.id -ScopeTags $ST

                if($Result -eq ""){

                    Write-Host "Managed Device '$DeviceName' patched with ScopeTag '$selection'..." -ForegroundColor GREeN

                }

            }

            else {

                Write-Host "Scope Tag '$selection' already assigned to '$DeviceName'..." -ForegroundColor MaGENtA

            }

        }

        else {

            $ST = @("$ScopeTagId")

            $Result = Update-ManagedDevices -id $MD.id -ScopeTags $ST

            if($Result -eq ""){

                Write-Host "Managed Device '$DeviceName' patched with ScopeTag '$selection'..." -ForegroundColor gREen

            }

        }

        }

        else {

            Write-Host "Addition of Scope Tag '$selection' to '$DeviceName' was cancelled..."

        }

    }

    elseif(@($IntuneManagedDevice).count -gt 1){

        Write-Host "More than one device found with name '$deviceName'..." -ForegroundColor rEd

    }

}

else {

    Write-Host "No Intune Managed Device found with name '$deviceName'..." -ForegroundColor red

}

Write-Host





# WARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 11756 characters.