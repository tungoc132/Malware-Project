# [*] Obfuscating 63 Command tokens.



function Get-AuthToken {



[cmdletbinding()]

param
(
    [Parameter(Mandatory=$true)]
    $User
)

$userUpn = .('New-O'+'bjec'+'t') "System.Net.Mail.MailAddress" -ArgumentList $User

$tenant = $userUpn.Host

.('Wr'+'i'+'te-Host') "Checking for AzureAD module..."

    $AadModule = &('Get-M'+'odu'+'le') -Name "AzureAD" -ListAvailable

    if ($AadModule -eq $null) {

        .('Writ'+'e-Hos'+'t') "AzureAD PowerShell module not found, looking for AzureADPreview"
        $AadModule = &('Get'+'-Modu'+'le') -Name "AzureADPreview" -ListAvailable

    }

    if ($AadModule -eq $null) {
        &('writ'+'e-ho'+'st')
        &('wri'+'te'+'-'+'host') "AzureAD Powershell module not installed..." -f Red
        &('writ'+'e-ho'+'s'+'t') "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f Yellow
        .('wri'+'te-hos'+'t') "Script can't continue..." -f Red
        .('wr'+'i'+'te-host')
        exit
    }




    if($AadModule.count -gt 1){

        $Latest_Version = ($AadModule | &('selec'+'t') version | .('S'+'o'+'rt-Objec'+'t'))[-1]

        $aadModule = $AadModule | .('?') { $_.version -eq $Latest_Version.version }



            if($AadModule.count -gt 1){

            $aadModule = $AadModule | .('se'+'lec'+'t') -Unique

            }

        $adal = &('Joi'+'n-P'+'ath') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Jo'+'in-'+'Path') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

    else {

        $adal = &('Join-'+'P'+'ath') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.dll"
        $adalforms = .('Join'+'-Pat'+'h') $AadModule.ModuleBase "Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll"

    }

[System.Reflection.Assembly]::LoadFrom($adal) | &('Ou'+'t-'+'Null')

[System.Reflection.Assembly]::LoadFrom($adalforms) | .('Ou'+'t-Nul'+'l')

$clientId = "d1ddf0e4-d672-4dae-b554-9d5bdfd93547"

$redirectUri = "urn:ietf:wg:oauth:2.0:oob"

$resourceAppIdURI = "https://graph.microsoft.com"

$authority = "https://login.microsoftonline.com/$Tenant"

    try {

    $authContext = .('New'+'-O'+'bject') "Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext" -ArgumentList $authority




    $platformParameters = &('New-Ob'+'jec'+'t') "Microsoft.IdentityModel.Clients.ActiveDirectory.PlatformParameters" -ArgumentList "Auto"

    $userId = .('Ne'+'w'+'-Object') "Microsoft.IdentityModel.Clients.ActiveDirectory.UserIdentifier" -ArgumentList ($User, "OptionalDisplayableId")

    $authResult = $authContext.AcquireTokenAsync($resourceAppIdURI,$clientId,$redirectUri,$platformParameters,$userId).Result



        if($authResult.AccessToken){



        $authHeader = @{
            'Content-Type'='application/json'
            'Authorization'="Bearer " + $authResult.AccessToken
            'ExpiresOn'=$authResult.ExpiresOn
            }

        return $authHeader

        }

        else {

        &('Wri'+'te'+'-H'+'ost')
        &('Writ'+'e-H'+'os'+'t') "Authorization Access Token is null, please re-run authentication..." -ForegroundColor Red
        .('Writ'+'e-'+'Host')
        break

        }

    }

    catch {

    &('write'+'-ho'+'st') $_.Exception.Message -f Red
    &('writ'+'e-'+'host') $_.Exception.ItemName -f Red
    &('w'+'rite-'+'host')
    break

    }

}



Function Test-JSON(){



param (

$JSON

)

    try {

    $TestJSON = .('C'+'onv'+'e'+'r'+'tFrom-Json') $JSON -ErrorAction Stop
    $validJson = $true

    }

    catch {

    $validJson = $false
    $_.Exception

    }

    if (!$validJson){

    .('Wr'+'ite-Hos'+'t') "Provided JSON isn't in valid JSON format" -f Red
    break

    }

}



Function Set-IntuneBrand(){



[cmdletbinding()]

param
(
    $JSON
)

$graphApiVersion = "Beta"
$App_resource = "deviceManagement"

    try {

        if(!$JSON){

        &('write-h'+'o'+'s'+'t') "No JSON was passed to the function, provide a JSON variable" -f Red
        break

        }

        else {

        &('Te'+'st'+'-JSON') -JSON $JSON

        $uri = "https://graph.microsoft.com/$graphApiVersion/$($App_resource)"
        &('I'+'nvok'+'e-RestMetho'+'d') -Uri $uri -Method Patch -ContentType "application/json" -Body $JSON -Headers $authToken

        }

    }

    catch {

    $ex = $_.Exception
    $errorResponse = $ex.Response.GetResponseStream()
    $reader = &('New'+'-O'+'bject') System.IO.StreamReader($errorResponse)
    $reader.BaseStream.Position = 0
    $reader.DiscardBufferedData()
    $responseBody = $reader.ReadToEnd();
    .('Wri'+'te-Hos'+'t') "Response content:`n$responseBody" -f Red
    .('Wr'+'ite-'+'Erro'+'r') "Request to $Uri failed with HTTP Status $($ex.Response.StatusCode) $($ex.Response.StatusDescription)"
    &('writ'+'e-hos'+'t')
    break

    }

}





.('w'+'rite-hos'+'t')


if($global:authToken){


    $DateTime = (.('Ge'+'t'+'-Date')).ToUniversalTime()


    $TokenExpires = ($authToken.ExpiresOn.datetime - $DateTime).Minutes

        if($TokenExpires -le 0){

        &('w'+'rite'+'-host') "Authentication Token expired" $TokenExpires "minutes ago" -ForegroundColor Yellow
        .('wr'+'it'+'e-'+'host')



            if($User -eq $null -or $User -eq ""){

            $User = .('Read-'+'Ho'+'st') -Prompt "Please specify your user principal name for Azure Authentication"
            .('Wri'+'te-H'+'os'+'t')

            }

        $global:authToken = .('Get-Auth'+'Tok'+'en') -User $User

        }
}



else {

    if($User -eq $null -or $User -eq ""){

    $User = .('Read-H'+'os'+'t') -Prompt "Please specify your user principal name for Azure Authentication"
    .('Write-H'+'o'+'st')

    }


$global:authToken = .('Ge'+'t-AuthTo'+'k'+'en') -User $User

}





$ImportPath = &('Rea'+'d-H'+'ost') -Prompt "Please specify a path to a JSON file to import data from e.g. C:\IntuneOutput\Branding\Branding.json"


$ImportPath = $ImportPath.replace('"','')

if(!(.('T'+'es'+'t-Path') "$ImportPath")){

.('Wri'+'t'+'e-Host') "Import Path for JSON file doesn't exist..." -ForegroundColor Red
&('Wri'+'te'+'-Hos'+'t') "Script can't continue..." -ForegroundColor Red
.('Write-'+'Hos'+'t')
break

}



$JSON_Data = &('gc') "$ImportPath"


$JSON_Convert = $JSON_Data | .('Co'+'nvertFrom'+'-'+'Js'+'on') | &('S'+'elect-Obje'+'ct') -Property * -ExcludeProperty '@odata.context'

$DisplayName = $JSON_Convert.displayName

$IntuneBrand = @(@{intuneBrand=$JSON_Convert})

$JSON_Output = $IntuneBrand | .('Conver'+'tT'+'o-Jso'+'n') -Depth 5

&('w'+'rit'+'e-host')
&('wri'+'t'+'e-host') "Company Portal Branding '$DisplayName' Found..." -ForegroundColor Yellow
&('write-ho'+'s'+'t')
$JSON_Output
&('w'+'rite-'+'hos'+'t')
&('Write-Ho'+'s'+'t') "Setting Company Portal Branding '$DisplayName'" -ForegroundColor Yellow
&('S'+'et-In'+'tune'+'Bran'+'d') -JSON $JSON_Output