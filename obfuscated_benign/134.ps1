c:\WINDOWS\sYsteM32\cMd   /C   POWeRshElL -CoMMANd   "



function Get-AuthToken {



        [cmdletbinding()]

        param
        (
            [Parameter(Mandatory = $true)]
            $User
        )

        $userUpn = New-Object \"System.Net.Mail.MailAddress\" -ArgumentList $User

        $tenant = $userUpn.Host

        Write-Host \"Checking for AzureAD module...\"

        $AadModule = Get-Module -Name \"AzureAD\" -ListAvailable

        if ($AadModule -eq $null) {

            Write-Host \"AzureAD PowerShell module not found, looking for AzureADPreview\"
            $AadModule = Get-Module -Name \"AzureADPreview\" -ListAvailable

        }

        if ($AadModule -eq $null) {
            write-host
            write-host \"AzureAD Powershell module not installed...\" -f Red
            write-host \"Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt\" -f Yellow
            write-host \"Script can't continue...\" -f Red
            write-host
            exit
        }




        if ($AadModule.count -gt 1) {

            $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

            $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if ($AadModule.count -gt 1) {

                $aadModule = $AadModule | select -Unique

            }

            $adal = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"
            $adalforms = Join-Path $AadModule.ModuleBase \"M<REDACTED: ArgumentLength = 10651>rite-Host



    $AppType = Read-Host -Prompt \"Please specify the type of report [Android_iOS, WIP_WE, WIP_MDM]\"

    if($AppType -eq \"Android_iOS\" -or $AppType -eq \"WIP_WE\" -or $AppType -eq \"WIP_MDM\") {

        Write-Host
        write-host \"Running query against Microsoft Graph to download App Protection Report for '$AppType'..\" -f Yellow

        $ofs = ','
        $stream = [System.IO.StreamWriter]::new(\"$ExportPath\\AppRegistrationSummary_$AppType.csv\", $false, [System.Text.Encoding]::UTF8)
        $ManagedAppPolicies = Get-ManagedAppPolicyRegistrationSummary -ReportType $AppType
        $stream.WriteLine([string]($ManagedAppPolicies.content.header | % {$_.columnName } ))

        do {
            Test-AuthToken

            write-host \"Your data is being downloaded for '$AppType'...\"
            $MoreItem = $ManagedAppPolicies.content.skipToken -ne \"\" -and $ManagedAppPolicies.content.skipToken -ne $null

            foreach ($SummaryItem in $ManagedAppPolicies.content.body) {

                $stream.WriteLine([string]($SummaryItem.values -replace \",\",\".\"))
            }

            if ($MoreItem){

                $ManagedAppPolicies = Get-ManagedAppPolicyRegistrationSummary -ReportType $AppType -NextPage ($ManagedAppPolicies.content.skipToken)
            }

        } while ($MoreItem)

        $stream.close()

        write-host

    }

    else {

        Write-Host \"AppType isn't a valid option...\" -ForegroundColor Red
        Write-Host

    }"
|
\--> POWeRshElL -CoMMANd   "



function Get-AuthToken {



        [cmdletbinding()]

        param
        (
            [Parameter(Mandatory = $true)]
            $User
        )

        $userUpn = New-Object \"System.Net.Mail.MailAddress\" -ArgumentList $User

        $tenant = $userUpn.Host

        Write-Host \"Checking for AzureAD module...\"

        $AadModule = Get-Module -Name \"AzureAD\" -ListAvailable

        if ($AadModule -eq $null) {

            Write-Host \"AzureAD PowerShell module not found, looking for AzureADPreview\"
            $AadModule = Get-Module -Name \"AzureADPreview\" -ListAvailable

        }

        if ($AadModule -eq $null) {
            write-host
            write-host \"AzureAD Powershell module not installed...\" -f Red
            write-host \"Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt\" -f Yellow
            write-host \"Script can't continue...\" -f Red
            write-host
            exit
        }




        if ($AadModule.count -gt 1) {

            $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

            $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if ($AadModule.count -gt 1) {

                $aadModule = $AadModule | select -Unique

            }

            $adal = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"
            $adalforms = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.<REDACTED: ArgumentLength = 10620>    }

    Write-Host



    $AppType = Read-Host -Prompt \"Please specify the type of report [Android_iOS, WIP_WE, WIP_MDM]\"

    if($AppType -eq \"Android_iOS\" -or $AppType -eq \"WIP_WE\" -or $AppType -eq \"WIP_MDM\") {

        Write-Host
        write-host \"Running query against Microsoft Graph to download App Protection Report for '$AppType'..\" -f Yellow

        $ofs = ','
        $stream = [System.IO.StreamWriter]::new(\"$ExportPath\\AppRegistrationSummary_$AppType.csv\", $false, [System.Text.Encoding]::UTF8)
        $ManagedAppPolicies = Get-ManagedAppPolicyRegistrationSummary -ReportType $AppType
        $stream.WriteLine([string]($ManagedAppPolicies.content.header | % {$_.columnName } ))

        do {
            Test-AuthToken

            write-host \"Your data is being downloaded for '$AppType'...\"
            $MoreItem = $ManagedAppPolicies.content.skipToken -ne \"\" -and $ManagedAppPolicies.content.skipToken -ne $null

            foreach ($SummaryItem in $ManagedAppPolicies.content.body) {

                $stream.WriteLine([string]($SummaryItem.values -replace \",\",\".\"))
            }

            if ($MoreItem){

                $ManagedAppPolicies = Get-ManagedAppPolicyRegistrationSummary -ReportType $AppType -NextPage ($ManagedAppPolicies.content.skipToken)
            }

        } while ($MoreItem)

        $stream.close()

        write-host

    }

    else {

        Write-Host \"AppType isn't a valid option...\" -ForegroundColor Red
        Write-Host

    }"

WARNING: This command exceeds the cmd.exe maximum allowed length of 8190 characters! Its length is 10651 characters.

Executed:
  CLI:  Launcher\Cmd\5
  FULL: Out-PowerShellLauncher -ScriptBlock $ScriptBlock -Command 2

Result:
c:\WINDOWS\sYsteM32\cMd   /C   POWeRshElL -CoMMANd   "



function Get-AuthToken {



        [cmdletbinding()]

        param
        (
            [Parameter(Mandatory = $true)]
            $User
        )

        $userUpn = New-Object \"System.Net.Mail.MailAddress\" -ArgumentList $User

        $tenant = $userUpn.Host

        Write-Host \"Checking for AzureAD module...\"

        $AadModule = Get-Module -Name \"AzureAD\" -ListAvailable

        if ($AadModule -eq $null) {

            Write-Host \"AzureAD PowerShell module not found, looking for AzureADPreview\"
            $AadModule = Get-Module -Name \"AzureADPreview\" -ListAvailable

        }

        if ($AadModule -eq $null) {
            write-host
            write-host \"AzureAD Powershell module not installed...\" -f Red
            write-host \"Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt\" -f Yellow
            write-host \"Script can't continue...\" -f Red
            write-host
            exit
        }




        if ($AadModule.count -gt 1) {

            $Latest_Version = ($AadModule | select version | Sort-Object)[-1]

            $aadModule = $AadModule | ? { $_.version -eq $Latest_Version.version }



            if ($AadModule.count -gt 1) {

                $aadModule = $AadModule | select -Unique

            }

            $adal = Join-Path $AadModule.ModuleBase \"Microsoft.IdentityModel.Clients.ActiveDirectory.dll\"
            $adalforms = Join-Path $<REDACTED: ObfuscatedLength = 10651> Write-Host



    $AppType = Read-Host -Prompt \"Please specify the type of report [Android_iOS, WIP_WE, WIP_MDM]\"

    if($AppType -eq \"Android_iOS\" -or $AppType -eq \"WIP_WE\" -or $AppType -eq \"WIP_MDM\") {

        Write-Host
        write-host \"Running query against Microsoft Graph to download App Protection Report for '$AppType'..\" -f Yellow

        $ofs = ','
        $stream = [System.IO.StreamWriter]::new(\"$ExportPath\\AppRegistrationSummary_$AppType.csv\", $false, [System.Text.Encoding]::UTF8)
        $ManagedAppPolicies = Get-ManagedAppPolicyRegistrationSummary -ReportType $AppType
        $stream.WriteLine([string]($ManagedAppPolicies.content.header | % {$_.columnName } ))

        do {
            Test-AuthToken

            write-host \"Your data is being downloaded for '$AppType'...\"
            $MoreItem = $ManagedAppPolicies.content.skipToken -ne \"\" -and $ManagedAppPolicies.content.skipToken -ne $null

            foreach ($SummaryItem in $ManagedAppPolicies.content.body) {

                $stream.WriteLine([string]($SummaryItem.values -replace \",\",\".\"))
            }

            if ($MoreItem){

                $ManagedAppPolicies = Get-ManagedAppPolicyRegistrationSummary -ReportType $AppType -NextPage ($ManagedAppPolicies.content.skipToken)
            }

        } while ($MoreItem)

        $stream.close()

        write-host

    }

    else {

        Write-Host \"AppType isn't a valid option...\" -ForegroundColor Red
        Write-Host

    }"

# sWARNING: This command exceeds the cmd.exe maximum length of 8190. Its length is 10651 characters.