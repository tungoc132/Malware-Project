# [*] Obfuscating 65 Argument tokens.


[CmdletBinding()]

Param(

    [Parameter(Mandatory=$true, HelpMessage="AdminUser@myenvironment.onmicrosoft.com")]
    $AdminUser,

    [Parameter(Mandatory=$false, HelpMessage="MySecAdminGroup")]
    [string]$SecAdminGroup,

    [Parameter(Mandatory=$false, HelpMessage="c:\mylist.txt")]
    $SecurityGroupList

)





if ($SecurityGroupList){

    $SecurityGroupList = Get-Content "$SecurityGroupList"

}

$AADEnvironment = (New-Object "System.Net.Mail.MailAddress" -ArgumentList $AdminUser).Host

$RBACRoleName    = "MDATP SecAdmin"
$SecurityGroup   = "MDATP SecAdmin SG"
$User = $AdminUser





function GeT-AUtHToKeN {



  [cmdletbinding()]

  param
  (
      [Parameter(Mandatory=$true)]
      $User
  )

  $userUpn = New-Object "System.Net.Mail.MailAddress" -ArgumentList $User

  $tenant = $userUpn.Host

  Write-Host "Checking for AzureAD module..."

      $AadModule = Get-Module -Name "AzureAD" -ListAvailable

      if ($AadModule -eq $null) {

          Write-Host "AzureAD PowerShell module not found, looking for AzureADPreview"
          $AadModule = Get-Module -Name "AzureADPreview" -ListAvailable

      }

      if ($AadModule -eq $null) {
          Write-Host
          Write-Host "AzureAD Powershell module not installed..." -f REd
          Write-Host "Install by running 'Install-Module AzureAD' or 'Install-Module AzureADPreview' from an elevated PowerShell prompt" -f YEllOw
          Write-Host "Script can't continue..." -f rED
          Write-Host
          exit
      }




      if($AadModule.count -gt 1){

          $Latest_Version = ($AadModule | Select-Object verSioN | Sort-Object)[-1]

          $aadModule = $AadModule | Where-Object { $_<REDACTED: ObfuscatedLength = 16401> {


    try {

      [System.Guid]::Parse($SecurityGroup) | Out-Null
      Write-Host "ObjectId: $SecurityGroup" -ForegroundColor greEN

    }

    catch {

        Write-Host "ObjectId: $SecurityGroup is not a valid ObjectId" -ForegroundColor rEd
        Write-Host "Verify that your security group list only contains valid ObjectIds and try again." -ForegroundColor cYAn
        exit -1

    }

  }


  $ValidatedSecurityGroupList = $SecurityGroupList -join "`",`""

  $SecurityGroupList
  $ValidatedSecurityGroupList

  Write-Host ""
  Write-Host "Adding security groups to RBAC role '$RBACRoleName'..." -ForegroundColor yELLow

  Assign-RBACRole -Id $NewRBACRoleID -DisplayName 'MDATP RBAC Assignment' -MemberGroupId $ValidatedSecurityGroupList -TargetGroupId "default"


}



Write-Host "Retrieving permissions for new role: $RBACRoleName..." -ForegroundColor yellow
Write-Host

$RBAC_Role = Get-RBACRole | Where-Object { $_.displayName -eq "$RBACRoleName" }

Write-Host $RBAC_Role.displayName -ForegroundColor gREEn
Write-Host $RBAC_Role.id -ForegroundColor CyAn
$RBAC_Role.RolePermissions.resourceActions.allowedResourceActions
Write-Host



Write-Host "Members of RBAC Role '$RBACRoleName' should now have access to Security Baseline and" -ForegroundColor CyAN
write-host "Onboarded machines tiles in Microsoft Defender Security Center." -ForegroundColor CYan
Write-Host
Write-Host "https://securitycenter.windows.com/configuration-management"
Write-Host
Write-Host "Add users and groups to the new role assignment 'MDATP RBAC Assignment' as needed." -ForegroundColor CYAn

Write-Host
Write-Host "Configuration of MDATP Intune SecAdmin Role complete..." -ForegroundColor GReeN
Write-Host


WARNING: This command exceeds the cmd.exe maximum length of 8190.
         Its length is 16401 characters.